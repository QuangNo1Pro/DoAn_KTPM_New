<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" />
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.0/font/bootstrap-icons.css">

<style>
  .suggestions-container {
    position: absolute;
    z-index: 1000;
    width: 100%;
    background: white;
    border: 1px solid #ddd;
    border-radius: 0 0 4px 4px;
    box-shadow: 0 2px 5px rgba(0,0,0,0.1);
    max-height: 300px;
    overflow-y: auto;
    display: none;
    top: calc(100% - 1px);
    left: 0;
  }
  .suggestion-item {
    padding: 10px 12px;
    cursor: pointer;
    border-bottom: 1px solid #f0f0f0;
    display: flex;
    align-items: center;
  }
  .suggestion-item:last-child { border-bottom: none; }
  .suggestion-item:hover { background-color: #f5f5f5; }
  .suggestion-item i { margin-right: 10px; color: #666; }
  
  .suggestion-item i.bi-youtube { color: #FF0000; }
  .suggestion-item i.bi-wikipedia { color: #3366cc; }
  .suggestion-item i.bi-google { color: #4285F4; }
  
  .suggestion-item .highlight { font-weight: bold; }
  .suggestion-item .description {
    font-size: 0.8em;
    color: #666;
    margin-top: 2px;
    display: none;
  }
  .suggestion-item:hover .description { display: block; }
  .source-badge {
    font-size: 0.7em;
    padding: 2px 5px;
    border-radius: 3px;
    margin-left: 5px;
  }
  
  .method-card {
    border-radius: 10px;
    box-shadow: 0 3px 10px rgba(0,0,0,0.1);
    transition: all 0.3s;
    cursor: pointer;
    height: 100%;
    border: 3px solid transparent;
  }
  
  .method-card:hover {
    transform: translateY(-5px);
    box-shadow: 0 5px 15px rgba(0,0,0,0.2);
  }
  
  .method-card.active {
    border-color: #0d6efd;
  }
  
  .method-icon {
    font-size: 2.5rem;
    margin-bottom: 15px;
  }
  
  .card-body-custom {
    display: flex;
    flex-direction: column;
    align-items: center;
    padding: 2rem 1rem;
    text-align: center;
  }

  .search-options {
    margin-top: 20px;
    display: none;
  }
  
  .search-options.active {
    display: block;
    animation: fadeIn 0.5s;
  }
  
  @keyframes fadeIn {
    from {
      opacity: 0;
      transform: translateY(-20px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
  
  .btn-youtube {
    background-color: #FF0000;
    border-color: #FF0000;
    color: #fff;
  }
  
  .btn-wikipedia {
    background-color: #3366cc;
    border-color: #3366cc;
    color: #fff;
  }
  
  .btn-google {
    background-color: #4285F4;
    border-color: #4285F4;
    color: #fff;
  }
  
  .btn-youtube:hover, .btn-wikipedia:hover, .btn-google:hover {
    filter: brightness(90%);
    color: #fff;
  }
  
  .source-badge.youtube {
    background-color: #FF0000;
  }
  
  .source-badge.wikipedia {
    background-color: #3366cc;
  }
  
  .source-badge.google {
    background-color: #4285F4;
  }
</style>

<div class="container mt-5">
  <div class="card shadow-sm mb-4">
    <div class="card-body">
      <h4 class="card-title text-center mb-4">üîç T√¨m ki·∫øm Ch·ªß ƒê·ªÅ Video AI</h4>
      
      <!-- Ph∆∞∆°ng th·ª©c t√¨m ki·∫øm -->
      <div class="row g-4 mb-4">
        <!-- Ph∆∞∆°ng th·ª©c 1: Ng∆∞·ªùi d√πng nh·∫≠p -->
        <div class="col-md-4">
          <div class="method-card card h-100 {{#if (eq mode 'user')}}active{{/if}}" data-method="user">
            <div class="card-body-custom">
              <div class="method-icon text-primary">
                <i class="bi bi-person-fill"></i>
              </div>
              <h5 class="card-title">Ng∆∞·ªùi d√πng nh·∫≠p</h5>
              <p class="card-text text-muted">Nh·∫≠p √Ω t∆∞·ªüng ch·ªß ƒë·ªÅ video c·ªßa ri√™ng b·∫°n</p>
            </div>
          </div>
        </div>
        
        <!-- Ph∆∞∆°ng th·ª©c 2: Web Trend -->
        <div class="col-md-4">
          <div class="method-card card h-100 {{#if (eq mode 'web')}}active{{/if}}" data-method="web">
            <div class="card-body-custom">
              <div class="method-icon text-success">
                <i class="bi bi-globe2"></i>
              </div>
              <h5 class="card-title">Web Trend</h5>
              <p class="card-text text-muted">Kh√°m ph√° c√°c xu h∆∞·ªõng ph·ªï bi·∫øn t·ª´ nhi·ªÅu ngu·ªìn</p>
            </div>
          </div>
        </div>
        
        <!-- Ph∆∞∆°ng th·ª©c 3: AI sinh ra -->
        <div class="col-md-4">
          <div class="method-card card h-100 {{#if (eq mode 'ai')}}active{{/if}}" data-method="ai">
            <div class="card-body-custom">
              <div class="method-icon text-danger">
                <i class="bi bi-robot"></i>
              </div>
              <h5 class="card-title">AI sinh ra</h5>
              <p class="card-text text-muted">ƒê·ªÉ AI g·ª£i √Ω ch·ªß ƒë·ªÅ d·ª±a tr√™n t·ª´ kh√≥a c·ªßa b·∫°n</p>
            </div>
          </div>
        </div>
      </div>
      
      <!-- Form t√¨m ki·∫øm -->
      <form id="searchForm" method="POST" action="/search">
        <input type="hidden" name="mode" id="modeInput" value="{{mode}}">

        <!-- T√πy ch·ªçn cho Ng∆∞·ªùi d√πng nh·∫≠p -->
        <div id="userOptions" class="search-options {{#if (eq mode 'user')}}active{{/if}}">
          <div class="card border-primary">
            <div class="card-header bg-primary text-white">
              <i class="bi bi-person-fill me-2"></i> Nh·∫≠p ch·ªß ƒë·ªÅ c·ªßa b·∫°n
            </div>
            <div class="card-body">
              <div class="mb-3 position-relative">
                <label for="userKeyword" class="form-label">Ch·ªß ƒë·ªÅ video:</label>
                <div class="input-group">
                  <input type="text" class="form-control keyword-input" id="userKeyword" name="keyword_user" placeholder="Nh·∫≠p ch·ªß ƒë·ªÅ video c·ªßa b·∫°n..." value="{{#if (eq mode 'user')}}{{keyword}}{{/if}}" autocomplete="off" data-source="all">
                  <span class="input-group-text bg-white border-start-0 clear-keyword" style="cursor: pointer; display: none;"><i class="bi bi-x"></i></span>
                </div>
                <div class="suggestions-container"></div>
              </div>
              <div class="text-end">
                <button type="submit" class="btn btn-primary px-4">
                  <i class="bi bi-search me-2"></i>T√¨m ki·∫øm
                </button>
              </div>
            </div>
          </div>
          
          <!-- Hi·ªÉn th·ªã script trong tab Ng∆∞·ªùi d√πng nh·∫≠p -->
          {{#if (eq mode 'user')}}
            {{#if script}}
              <div class="alert alert-info mt-3">{{{script}}}</div>
            {{/if}}
          {{/if}}
        </div>

        <!-- T√πy ch·ªçn cho Web Trend -->
        <div id="webOptions" class="search-options {{#if (eq mode 'web')}}active{{/if}}">
          <div class="card border-success">
            <div class="card-header bg-success text-white">
              <i class="bi bi-globe2 me-2"></i> Kh√°m ph√° xu h∆∞·ªõng
            </div>
            <div class="card-body">
              <div class="mb-3">
                <label class="form-label">Ch·ªçn ngu·ªìn:</label>
                <div class="d-flex gap-2 flex-wrap">
                  <button type="button" class="source-btn btn {{#unless source}}btn-primary{{else}}{{#if (eq source 'all')}}btn-primary{{else}}btn-outline-primary{{/if}}{{/unless}}" data-source="all">
                    <i class="bi bi-globe me-1"></i> T·∫•t c·∫£
                  </button>
                  <button type="button" class="source-btn btn {{#if (eq source 'youtube')}}btn-youtube{{else}}btn-outline-danger{{/if}}" data-source="youtube">
                    <i class="bi bi-youtube me-1"></i> YouTube
                  </button>
                  <button type="button" class="source-btn btn {{#if (eq source 'wikipedia')}}btn-wikipedia{{else}}btn-outline-info{{/if}}" data-source="wikipedia">
                    <i class="bi bi-wikipedia me-1"></i> Wikipedia
                  </button>
                  <button type="button" class="source-btn btn {{#if (eq source 'google')}}btn-google{{else}}btn-outline-primary{{/if}}" data-source="google">
                    <i class="bi bi-google me-1"></i> Google Trends
                  </button>
                </div>
                <input type="hidden" name="source" id="sourceInput" value="{{source}}">
              </div>
              <div class="mb-3 position-relative">
                <label for="webKeyword" class="form-label">T·ª´ kh√≥a t√¨m ki·∫øm (t√πy ch·ªçn):</label>
                <div class="input-group">
                  <input type="text" class="form-control keyword-input" id="webKeyword" name="keyword_web" placeholder="ƒê·ªÉ tr·ªëng n·∫øu b·∫°n mu·ªën xem xu h∆∞·ªõng m·ªõi nh·∫•t" value="{{#if (eq mode 'web')}}{{keyword}}{{/if}}" autocomplete="off" data-source="{{source}}">
                  <span class="input-group-text bg-white border-start-0 clear-keyword" style="cursor: pointer; display: none;"><i class="bi bi-x"></i></span>
                </div>
                <div class="suggestions-container"></div>
              </div>
              <div class="text-end">
                <button type="submit" class="btn btn-success px-4">
                  <i class="bi bi-search me-2"></i>Kh√°m ph√° xu h∆∞·ªõng
                </button>
              </div>
            </div>
          </div>
          
          <!-- Hi·ªÉn th·ªã script trong tab Web Trend -->
          {{#if (eq mode 'web')}}
            {{#if script}}
              <div class="alert alert-info mt-3">{{{script}}}</div>
            {{/if}}
          {{/if}}
          
          <!-- ƒê∆ØA DANH S√ÅCH TRENDING V√ÄO TRONG TAB WEB TREND -->
          {{#if keywordList}}
          <div class="mt-4">
            <div class="d-flex justify-content-between align-items-center mb-3">
              <h5 class="text-primary mb-0">üîª Ch·ªß ƒë·ªÅ trending:</h5>
              <div class="btn-group btn-group-sm" role="group">
                <button type="button" class="btn btn-outline-secondary filter-btn {{#unless source}}active{{else}}{{#if (eq source 'all')}}active{{/if}}{{/unless}}" data-source="all">T·∫•t c·∫£</button>
                <button type="button" class="btn btn-outline-danger filter-btn {{#if (eq source 'youtube')}}active{{/if}}" data-source="youtube">
                  <i class="bi bi-youtube"></i> YouTube
                </button>
                <button type="button" class="btn btn-outline-info filter-btn {{#if (eq source 'wikipedia')}}active{{/if}}" data-source="wikipedia">
                  <i class="bi bi-wikipedia"></i> Wikipedia
                </button>
                <button type="button" class="btn btn-outline-success filter-btn {{#if (eq source 'google')}}active{{/if}}" data-source="google">
                  <i class="bi bi-google"></i> Google
                </button>
              </div>
            </div>
            <div class="list-group">
              {{#each keywordList}}
                <button type="button" class="list-group-item list-group-item-action keyword-btn d-flex justify-content-between align-items-center" data-source="{{this.source}}">
                  <span>{{this.title}}</span>
                  <div>
                    {{#if this.views}}<span class="badge bg-secondary me-2">{{this.views}} l∆∞·ª£t xem</span>{{/if}}
                    <span class="badge source-badge {{#if (eq this.source 'YouTube')}}youtube{{/if}}{{#if (eq this.source 'Wikipedia')}}wikipedia{{/if}}{{#if (eq this.source 'Google Trends')}}google{{/if}}">{{this.source}}</span>
                  </div>
                </button>
              {{/each}}
            </div>
          </div>
          {{/if}}
          <!-- K·∫æT TH√öC DANH S√ÅCH TRENDING -->
        </div>

        <!-- T√πy ch·ªçn cho AI sinh ra -->
        <div id="aiOptions" class="search-options {{#if (eq mode 'ai')}}active{{/if}}">
          <div class="card border-danger">
            <div class="card-header bg-danger text-white">
              <i class="bi bi-robot me-2"></i> Sinh √Ω t∆∞·ªüng b·∫±ng AI
            </div>
            <div class="card-body">
              <div class="mb-3 position-relative">
                <label for="aiKeyword" class="form-label">G·ª£i √Ω t·ª´ kh√≥a cho AI:</label>
                <div class="input-group">
                  <input type="text" class="form-control keyword-input" id="aiKeyword" name="keyword_ai" placeholder="Nh·∫≠p m·ªôt v√†i t·ª´ kh√≥a ƒë·ªÉ AI g·ª£i √Ω ch·ªß ƒë·ªÅ..." value="{{#if (eq mode 'ai')}}{{keyword}}{{/if}}" autocomplete="off" data-source="all">
                  <span class="input-group-text bg-white border-start-0 clear-keyword" style="cursor: pointer; display: none;"><i class="bi bi-x"></i></span>
                </div>
                <div class="suggestions-container"></div>
              </div>
              <div class="text-end">
                <button type="submit" class="btn btn-danger px-4" id="aiSubmitBtn">
                  <i class="bi bi-stars me-2"></i>T·∫°o √Ω t∆∞·ªüng b·∫±ng AI
                </button>
              </div>
            </div>
          </div>
          
          <!-- Hi·ªÉn th·ªã script trong tab AI sinh ra -->
          {{#if (eq mode 'ai')}}
            {{#if script}}
              <div class="alert alert-info mt-3">{{{script}}}</div>
            {{/if}}
            
            <!-- Hi·ªÉn th·ªã danh s√°ch ch·ªß ƒë·ªÅ do AI g·ª£i √Ω -->
            {{#if keywordList}}
            <div class="mt-4">
              <div class="d-flex justify-content-between align-items-center mb-3">
                <h5 class="text-primary mb-0">ü§ñ Ch·ªß ƒë·ªÅ AI g·ª£i √Ω:</h5>
              </div>
              <div class="list-group">
                {{#each keywordList}}
                  <button type="button" class="list-group-item list-group-item-action keyword-btn d-flex justify-content-between align-items-center">
                    <span>{{this.title}}</span>
                    <div>
                      <span class="badge source-badge" style="background-color: #ff6b6b;">AI</span>
                    </div>
                  </button>
                {{/each}}
              </div>
            </div>
            {{/if}}
          {{/if}}
        </div>
      </form>
    </div>
  </div>

  <div id="loadingSpinner" class="text-center my-5 d-none">
    <div class="spinner-border text-primary" role="status" style="width: 3rem; height: 3rem;">
      <span class="visually-hidden">Loading...</span>
    </div>
    <p class="mt-3 text-muted">ƒêang sinh k·ªãch b·∫£n b·∫±ng AI...</p>
  </div>

  <div id="aiScriptContainer" class="mt-4 d-none">
    <div class="card border-info">
      <div class="card-header bg-info text-white d-flex justify-content-between align-items-center">
        <span>ü§ñ K·ªãch b·∫£n AI</span>
        <button id="copyScriptBtn" class="btn btn-sm btn-light text-info">
          <i class="bi bi-clipboard"></i> Sao ch√©p
        </button>
      </div>
      <div class="card-body">
        <pre id="aiScriptContent" style="white-space: pre-wrap;" class="mb-0 text-dark"></pre>
      </div>
    </div>
  </div>

  <script>
    document.addEventListener('DOMContentLoaded', () => {
      // Kh·ªüi t·∫°o c√°c bi·∫øn v√† s·ª± ki·ªán
      const methodCards = document.querySelectorAll('.method-card');
      const modeInput = document.getElementById('modeInput');
      const searchOptions = document.querySelectorAll('.search-options');
      const sourceBtns = document.querySelectorAll('.source-btn');
      const sourceInput = document.getElementById('sourceInput');
      const userKeyword = document.getElementById('userKeyword');
      const webKeyword = document.getElementById('webKeyword');
      const aiKeyword = document.getElementById('aiKeyword');
      const keywordInputs = document.querySelectorAll('.keyword-input');
      const scriptContainer = document.getElementById('aiScriptContainer');
      const scriptContent = document.getElementById('aiScriptContent');
      const loadingSpinner = document.getElementById('loadingSpinner');
      const copyScriptBtn = document.getElementById('copyScriptBtn');
      const clearKeywordBtns = document.querySelectorAll('.clear-keyword');
      const suggestionsContainers = document.querySelectorAll('.suggestions-container');
      const aiSubmitBtn = document.getElementById('aiSubmitBtn');
      let debounceTimer;
      
      // Th√™m x·ª≠ l√Ω ri√™ng cho n√∫t AI submit
      if (aiSubmitBtn) {
        aiSubmitBtn.addEventListener('click', function(e) {
          e.preventDefault(); // NgƒÉn ch·∫∑n submit form th√¥ng th∆∞·ªùng
          
          const aiKeywordValue = aiKeyword?.value || '';
          if (!aiKeywordValue || aiKeywordValue.trim() === '') {
            alert('Vui l√≤ng nh·∫≠p t·ª´ kh√≥a ƒë·ªÉ AI sinh ra √Ω t∆∞·ªüng!');
            aiKeyword.focus();
            return false;
          }
          
          console.log('ƒêang g·ª≠i y√™u c·∫ßu AI v·ªõi t·ª´ kh√≥a:', aiKeywordValue);
          
          // T·∫°o form m·ªõi v√† submit tr·ª±c ti·∫øp
          const tempForm = document.createElement('form');
          tempForm.method = 'POST';
          tempForm.action = '/search';
          tempForm.style.display = 'none';
          
          // Th√™m c√°c input c·∫ßn thi·∫øt
          const modeInput = document.createElement('input');
          modeInput.type = 'hidden';
          modeInput.name = 'mode';
          modeInput.value = 'ai';
          tempForm.appendChild(modeInput);
          
          const keywordInput = document.createElement('input');
          keywordInput.type = 'hidden';
          keywordInput.name = 'keyword'; // Server controller s·∫Ω t√¨m t·ª´ kh√≥a ·ªü ƒë√¢y
          keywordInput.value = aiKeywordValue;
          tempForm.appendChild(keywordInput);
          
          const sourceInput = document.createElement('input');
          sourceInput.type = 'hidden';
          sourceInput.name = 'source';
          sourceInput.value = 'ai';
          tempForm.appendChild(sourceInput);
          
          // Th√™m form v√†o body v√† submit
          document.body.appendChild(tempForm);
          tempForm.submit();
        });
      }
      
      // Kh√¥i ph·ª•c ch·ª©c nƒÉng g·ª£i √Ω t√¨m ki·∫øm
      keywordInputs.forEach((input, index) => {
        const suggestionsContainer = suggestionsContainers[index];
        const clearButton = clearKeywordBtns[index];
        
        // X·ª≠ l√Ω hi·ªÉn th·ªã/·∫©n n√∫t x√≥a d·ª±a tr√™n gi√° tr·ªã ban ƒë·∫ßu
        if (input.value.trim()) {
          clearButton.style.display = 'block';
        }
        
        // X·ª≠ l√Ω input
        input.addEventListener('input', function() {
          const value = this.value.trim();
          const source = this.dataset.source || 'all';
          
          // Hi·ªÉn th·ªã/·∫©n n√∫t x√≥a
          clearButton.style.display = value ? 'block' : 'none';
          
          // X·ª≠ l√Ω g·ª£i √Ω
          clearTimeout(debounceTimer);
          if (value.length > 0) {
            debounceTimer = setTimeout(() => {
              fetchSuggestions(value, suggestionsContainer, source);
            }, 300);
          } else {
            suggestionsContainer.style.display = 'none';
          }
        });
        
        // X·ª≠ l√Ω focus ƒë·ªÉ hi·ªÉn th·ªã g·ª£i √Ω
        input.addEventListener('focus', function() {
          const value = this.value.trim();
          if (value.length > 0) {
            const source = this.dataset.source || 'all';
            fetchSuggestions(value, suggestionsContainer, source);
          }
        });
        
        // X·ª≠ l√Ω n√∫t x√≥a t·ª´ kh√≥a
        if (clearButton) {
          clearButton.addEventListener('click', () => {
            input.value = '';
            clearButton.style.display = 'none';
            suggestionsContainer.style.display = 'none';
          });
        }
      });
      
      // ·∫®n g·ª£i √Ω khi click ra ngo√†i
      document.addEventListener('click', (e) => {
        if (!e.target.closest('.keyword-input') && !e.target.closest('.suggestions-container')) {
          suggestionsContainers.forEach(container => {
            container.style.display = 'none';
          });
        }
      });
      
      // H√†m l·∫•y g·ª£i √Ω
      async function fetchSuggestions(query, container, source = 'all') {
        try {
          const res = await fetch(`/suggest?q=${encodeURIComponent(query)}&source=${source}`);
          const data = await res.json();
          
          if (data && data.length > 0) {
            renderSuggestions(data, container, query, source);
          } else {
            container.style.display = 'none';
          }
        } catch (err) {
          console.error('L·ªói khi l·∫•y g·ª£i √Ω:', err);
        }
      }
      
      // H√†m hi·ªÉn th·ªã g·ª£i √Ω v·ªõi highlight t·ª´ kh√≥a
      function renderSuggestions(suggestions, container, query, source = 'all') {
        container.innerHTML = '';
        
        suggestions.forEach(suggestion => {
          const item = document.createElement('div');
          item.className = 'suggestion-item';
          
          // L·∫•y n·ªôi dung g·ª£i √Ω
          const suggestionText = typeof suggestion === 'string' ? suggestion : suggestion.text;
          
          // T·∫°o highlight cho t·ª´ kh√≥a trong g·ª£i √Ω
          const highlightedText = highlightMatch(suggestionText, query);
          
          // X√°c ƒë·ªãnh icon d·ª±a tr√™n source
          let iconClass = 'bi-search';
          if (source === 'youtube' || (suggestion.source && suggestion.source === 'YouTube')) {
            iconClass = 'bi-youtube';
          } else if (source === 'wikipedia' || (suggestion.source && suggestion.source === 'Wikipedia')) {
            iconClass = 'bi-wikipedia';
          } else if (source === 'google' || (suggestion.source && suggestion.source === 'Google')) {
            iconClass = 'bi-google';
          }
          
          item.innerHTML = `
            <i class="bi ${iconClass}"></i>
            <div>
              ${highlightedText}
              <div class="description">T√¨m ki·∫øm ch·ªß ƒë·ªÅ n√†y</div>
            </div>
          `;
          
          // T√¨m input parent element ƒë·ªÉ x√°c ƒë·ªãnh input v√† clear button c·∫ßn c·∫≠p nh·∫≠t
          const parentContainer = container.closest('.position-relative');
          const inputElement = parentContainer.querySelector('.keyword-input');
          const clearButtonElement = parentContainer.querySelector('.clear-keyword');
          
          item.addEventListener('click', () => {
            // Ch·ªâ c·∫≠p nh·∫≠t input trong tab hi·ªán t·∫°i
            if (inputElement) {
              inputElement.value = suggestionText;
            }
            
            // Hi·ªÉn th·ªã n√∫t x√≥a trong tab hi·ªán t·∫°i
            if (clearButtonElement) {
              clearButtonElement.style.display = 'block';
            }
            
            // ·∫®n container g·ª£i √Ω hi·ªán t·∫°i
            container.style.display = 'none';
            
            // N·∫øu ƒëang trong tab web, c·∫≠p nh·∫≠t source t·ª´ g·ª£i √Ω
            if (modeInput.value === 'web' && suggestion.source) {
              const sourceLower = suggestion.source.toLowerCase();
              if (sourceLower === 'youtube' || sourceLower === 'wikipedia' || sourceLower === 'google') {
                updateSourceSelection(sourceLower);
              }
            }
          });
          
          container.appendChild(item);
        });
        
        container.style.display = 'block';
      }
      
      // H√†m highlight t·ª´ kh√≥a trong g·ª£i √Ω
      function highlightMatch(text, query) {
        if (!query) return text;
        
        const escapedQuery = query.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
        const regex = new RegExp(`(${escapedQuery})`, 'gi');
        return text.replace(regex, '<strong class="highlight">$1</strong>');
      }

      // X·ª≠ l√Ω ch·ªçn ph∆∞∆°ng th·ª©c t√¨m ki·∫øm
      methodCards.forEach(card => {
        card.addEventListener('click', () => {
          // B·ªè tr·∫°ng th√°i active kh·ªèi t·∫•t c·∫£ cards
          methodCards.forEach(c => c.classList.remove('active'));
          
          // Th√™m tr·∫°ng th√°i active cho card ƒë√£ ch·ªçn
          card.classList.add('active');
          
          // C·∫≠p nh·∫≠t input mode ·∫©n
          const method = card.getAttribute('data-method');
          modeInput.value = method;
          
          // C·∫≠p nh·∫≠t hi·ªÉn th·ªã t√πy ch·ªçn t√¨m ki·∫øm
          searchOptions.forEach(option => {
            option.classList.remove('active');
          });
          document.getElementById(`${method}Options`).classList.add('active');
          
          // ƒê·∫¢M B·∫¢O KH√îNG ƒê·ªíNG B·ªò T·ª™ KH√ìA GI·ªÆA C√ÅC TAB
          // KH√îNG G·ªåI H√ÄM syncKeywordInputs();
        });
      });
      
      // X·ª≠ l√Ω ch·ªçn ngu·ªìn
      sourceBtns.forEach(btn => {
        btn.addEventListener('click', () => {
          const source = btn.getAttribute('data-source');
          updateSourceSelection(source);
        });
      });
      
      // H√†m c·∫≠p nh·∫≠t l·ª±a ch·ªçn ngu·ªìn
      function updateSourceSelection(source) {
        sourceInput.value = source;
        
        // C·∫≠p nh·∫≠t data-source c·ªßa webKeyword
        if (webKeyword) {
          webKeyword.dataset.source = source;
        }
        
        // C·∫≠p nh·∫≠t giao di·ªán n√∫t
        sourceBtns.forEach(b => {
          const btnSource = b.getAttribute('data-source');
          
          if (btnSource === 'all') {
            b.className = btnSource === source ? 
              'source-btn btn btn-primary' : 'source-btn btn btn-outline-primary';
          } else if (btnSource === 'youtube') {
            b.className = btnSource === source ? 
              'source-btn btn btn-youtube' : 'source-btn btn btn-outline-danger';
          } else if (btnSource === 'wikipedia') {
            b.className = btnSource === source ? 
              'source-btn btn btn-wikipedia' : 'source-btn btn btn-outline-info';
          } else if (btnSource === 'google') {
            b.className = btnSource === source ? 
              'source-btn btn btn-google' : 'source-btn btn btn-outline-primary';
          }
        });
      }

      // X·ª≠ l√Ω submit form khi ·ªü ch·∫ø ƒë·ªô web
      document.getElementById('searchForm').addEventListener('submit', function(e) {
        // ƒê·∫£m b·∫£o t·ª´ kh√≥a ƒë∆∞·ª£c set ƒë√∫ng tr∆∞·ªõc khi submit
        const mode = modeInput.value;
        
        // ƒê·∫¢M B·∫¢O KH√îNG ƒê·ªíNG B·ªò T·ª™ KH√ìA
        // KH√îNG G·ªåI H√ÄM syncKeywordInputs();
        
        // ƒê·∫£m b·∫£o t·ª´ kh√≥a ƒë∆∞·ª£c chuy·ªÉn v√†o ƒë√∫ng tr∆∞·ªùng name="keyword"
        // Lo·∫°i b·ªè t·∫•t c·∫£ c√°c input ·∫©n keyword tr∆∞·ªõc ƒë√≥ ƒë·ªÉ tr√°nh tr√πng l·∫∑p
        this.querySelectorAll('input[type=hidden][name=keyword]').forEach(el => el.remove());
        
        let keywordValue = '';
        if (mode === 'web') {
          keywordValue = webKeyword.value; // id="webKeyword" name="keyword_web"
        } else if (mode === 'user') {
          keywordValue = userKeyword.value; // id="userKeyword" name="keyword_user"
        } else if (mode === 'ai') {
          keywordValue = aiKeyword.value; // id="aiKeyword" name="keyword_ai"
          
          // Ki·ªÉm tra t·ª´ kh√≥a cho ch·∫ø ƒë·ªô AI
          if (!keywordValue || keywordValue.trim() === '') {
            e.preventDefault(); // NgƒÉn ch·∫∑n form submit
            alert('Vui l√≤ng nh·∫≠p t·ª´ kh√≥a ƒë·ªÉ AI sinh ra √Ω t∆∞·ªüng!');
            aiKeyword.focus(); // Focus v√†o √¥ nh·∫≠p li·ªáu
            return false;
          }
        }
        
        // Ki·ªÉm tra l·∫°i m·ªôt l·∫ßn n·ªØa
        console.log('Submit form v·ªõi t·ª´ kh√≥a:', keywordValue);
        
        // T·∫°o input ·∫©n m·ªõi cho keyword
        const hiddenInput = document.createElement('input');
        hiddenInput.type = 'hidden';
        hiddenInput.name = 'keyword';
        hiddenInput.value = keywordValue;
        this.appendChild(hiddenInput);
        
        // Th√™m debug ƒë·ªÉ theo d√µi qu√° tr√¨nh submit
        console.log(`Submitting form with mode: ${mode}, keyword: ${keywordValue}`);
      });

      // X·ª≠ l√Ω n√∫t ch·ªçn ch·ªß ƒë·ªÅ t·ª´ danh s√°ch k·∫øt qu·∫£
      document.querySelectorAll('.keyword-btn').forEach(btn => {
        btn.addEventListener('click', async () => {
          const keyword = btn.querySelector('span')?.textContent.trim() || '';
          
          loadingSpinner.classList.remove('d-none');
          scriptContainer.classList.add('d-none');
          scriptContent.textContent = '';

          try {
            const res = await fetch('/generate-script', {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify({ keyword })
            });

            const data = await res.json();

            if (data.success) {
              scriptContent.textContent = data.script;
              scriptContainer.classList.remove('d-none');
              window.scrollTo({ top: scriptContainer.offsetTop - 20, behavior: 'smooth' });
            } else {
              alert(data.error || 'L·ªói kh√¥ng x√°c ƒë·ªãnh!');
            }
          } catch (err) {
            alert('‚ùå L·ªói khi k·∫øt n·ªëi ƒë·∫øn m√°y ch·ªß ho·∫∑c AI.');
          } finally {
            loadingSpinner.classList.add('d-none');
          }
        });
      });

      // X·ª≠ l√Ω n√∫t l·ªçc trong danh s√°ch k·∫øt qu·∫£
      document.querySelectorAll('.filter-btn').forEach(btn => {
        btn.addEventListener('click', () => {
          const newSource = btn.getAttribute('data-source');
          sourceInput.value = newSource;
          modeInput.value = 'web';
          document.getElementById('searchForm').submit();
        });
      });

      // X·ª≠ l√Ω n√∫t sao ch√©p k·ªãch b·∫£n
      if (copyScriptBtn) {
        copyScriptBtn.addEventListener('click', () => {
          const scriptText = scriptContent.textContent;
          navigator.clipboard.writeText(scriptText)
            .then(() => {
              const originalText = copyScriptBtn.innerHTML;
              copyScriptBtn.innerHTML = '<i class="bi bi-check-lg"></i> ƒê√£ sao ch√©p';
              setTimeout(() => { copyScriptBtn.innerHTML = originalText; }, 2000);
            })
            .catch(err => console.error('L·ªói khi sao ch√©p: ', err));
        });
      }
    });
  </script>
</div>