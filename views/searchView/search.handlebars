<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" />

<div class="container mt-5">
    <div class="card shadow-sm">
        <div class="card-body">
            <h4 class="card-title mb-4">üîç T√¨m ki·∫øm Ch·ªß ƒê·ªÅ Video AI</h4>
            <form id="searchForm" method="POST" action="/search" class="row g-3">
                <div class="col-md-4">
                    <label for="mode" class="form-label">C√°ch th·ª©c t√¨m ki·∫øm:</label>
                    <select name="mode" id="mode" class="form-select">
                        <option value="user" {{#if (eq mode 'user')}}selected{{/if}}>Ng∆∞·ªùi d√πng nh·∫≠p</option>
                        <option value="web" {{#if (eq mode 'web')}}selected{{/if}}>Web Trend</option>
                        <option value="ai" {{#if (eq mode 'ai')}}selected{{/if}}>AI sinh ra</option>
                    </select>
                </div>

                <div class="col-md-6">
                    <label for="keyword" class="form-label">T·ª´ kh√≥a:</label>
                    <input type="text" name="keyword" id="keyword" class="form-control"
                        placeholder="Nh·∫≠p t·ª´ kh√≥a ho·∫∑c ƒë·ªÉ tr·ªëng n·∫øu ch·ªçn AI/Web" value="{{keyword}}">
                </div>

                <div class="col-md-2 d-flex align-items-end">
                    <button type="submit" class="btn btn-primary w-100">T√¨m ki·∫øm</button>
                </div>
            </form>
        </div>
    </div>

    {{!-- Hi·ªÉn th·ªã danh s√°ch keywordList n·∫øu c√≥ --}}
    {{#if keywordList}}
    <div class="mt-4">
        <h5 class="text-primary">üîª Ch·ªß ƒë·ªÅ trending:</h5>
        <div class="list-group">
            {{#each keywordList}}
            <button type="button" class="list-group-item list-group-item-action keyword-btn">{{this}}</button>
            {{/each}}
        </div>
    </div>
    {{/if}}

    <!-- Spinner khi AI ƒëang x·ª≠ l√Ω -->
    <div id="loadingSpinner" class="text-center my-5 d-none">
        <div class="spinner-border text-primary" role="status" style="width: 3rem; height: 3rem;">
            <span class="visually-hidden">Loading...</span>
        </div>
        <p class="mt-3 text-muted">ƒêang sinh k·ªãch b·∫£n b·∫±ng AI...</p>
    </div>

    <!-- Script hi·ªÉn th·ªã ·ªü ƒë√¢y -->
    <div id="aiScriptContainer" class="mt-4 d-none">
        <div class="card border-info shadow">
            <div class="card-header bg-info text-white fw-bold">ü§ñ K·ªãch b·∫£n AI sinh ra</div>
            <div class="card-body">
                <pre id="aiScriptContent" style="white-space: pre-wrap;" class="mb-0 text-dark"></pre>
            </div>
        </div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const keywordInput = document.getElementById('keyword');
            const scriptContainer = document.getElementById('aiScriptContainer');
            const scriptContent = document.getElementById('aiScriptContent');
            const loadingSpinner = document.getElementById('loadingSpinner');

            document.querySelectorAll('.keyword-btn').forEach(btn => {
                btn.addEventListener('click', async () => {
                    const keyword = btn.textContent.trim();
                    keywordInput.value = keyword;

                    // B·∫Øt ƒë·∫ßu loading
                    loadingSpinner.classList.remove('d-none');
                    scriptContainer.classList.add('d-none');
                    scriptContent.textContent = '';

                    try {
                        const res = await fetch('/generate-script', {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({ keyword })
                        });

                        const data = await res.json();

                        if (data.success) {
                            scriptContent.textContent = data.script;
                            scriptContainer.classList.remove('d-none');
                            window.scrollTo({
                                top: scriptContainer.offsetTop - 20,
                                behavior: 'smooth'
                            });
                        } else {
                            alert(data.error || 'L·ªói kh√¥ng x√°c ƒë·ªãnh!');
                        }
                    } catch (err) {
                        alert('‚ùå L·ªói khi k·∫øt n·ªëi ƒë·∫øn m√°y ch·ªß ho·∫∑c AI.');
                    } finally {
                        loadingSpinner.classList.add('d-none');
                    }
                });
            });
        });
    </script>
</div>
