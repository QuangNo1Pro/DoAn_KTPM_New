<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" />
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.0/font/bootstrap-icons.css">

<style>
  .suggestions-container {
    position: absolute;
    z-index: 1000;
    width: 100%;
    background: white;
    border: 1px solid #ddd;
    border-radius: 0 0 4px 4px;
    box-shadow: 0 2px 5px rgba(0,0,0,0.1);
    max-height: 300px;
    overflow-y: auto;
    display: none;
  }
  
  .suggestion-item {
    padding: 10px 12px;
    cursor: pointer;
    border-bottom: 1px solid #f0f0f0;
    display: flex;
    align-items: center;
  }
  
  .suggestion-item:last-child {
    border-bottom: none;
  }
  
  .suggestion-item:hover {
    background-color: #f5f5f5;
  }
  
  .suggestion-item i {
    margin-right: 10px;
    color: #666;
  }
  
  .suggestion-item .highlight {
    font-weight: bold;
  }
  
  .suggestion-item .description {
    font-size: 0.8em;
    color: #666;
    margin-top: 2px;
    display: none;
  }
  
  .suggestion-item:hover .description {
    display: block;
  }
  
  .source-badge {
    font-size: 0.7em;
    padding: 2px 5px;
    border-radius: 3px;
    margin-left: 5px;
  }
</style>

<div class="container mt-5">
    <div class="card shadow-sm">
        <div class="card-body">
            <h4 class="card-title mb-4">üîç T√¨m ki·∫øm Ch·ªß ƒê·ªÅ Video AI</h4>
            <form id="searchForm" method="POST" action="/search" class="row g-3">
                <div class="col-md-3">
                    <label for="mode" class="form-label">C√°ch th·ª©c t√¨m ki·∫øm:</label>
                    <select name="mode" id="mode" class="form-select">
                        <option value="user" {{#if (eq mode 'user')}}selected{{/if}}>Ng∆∞·ªùi d√πng nh·∫≠p</option>
                        <option value="web" {{#if (eq mode 'web')}}selected{{/if}}>Web Trend</option>
                        <option value="ai" {{#if (eq mode 'ai')}}selected{{/if}}>AI sinh ra</option>
                    </select>
                </div>

                <div class="col-md-3">
                    <label for="source" class="form-label">Ngu·ªìn:</label>
                    <select name="source" id="source" class="form-select">
                        <option value="all" {{#unless source}}selected{{else}}{{#if (eq source 'all')}}selected{{/if}}{{/unless}}>T·∫•t c·∫£</option>
                        <option value="youtube" {{#if (eq source 'youtube')}}selected{{/if}}>YouTube</option>
                        <option value="wikipedia" {{#if (eq source 'wikipedia')}}selected{{/if}}>Wikipedia</option>
                        <option value="google" {{#if (eq source 'google')}}selected{{/if}}>Google Trends</option>
                    </select>
                </div>

                <div class="col-md-4 position-relative">
                    <label for="keyword" class="form-label">T·ª´ kh√≥a:</label>
                    <div class="input-group">
                        <input type="text" name="keyword" id="keyword" class="form-control"
                            placeholder="Nh·∫≠p t·ª´ kh√≥a ho·∫∑c ƒë·ªÉ tr·ªëng" value="{{keyword}}" autocomplete="off">
                        <span class="input-group-text bg-white border-start-0" id="clearKeyword" style="cursor: pointer; display: none;">
                            <i class="bi bi-x"></i>
                        </span>
                    </div>
                    <div id="suggestions" class="suggestions-container"></div>
                </div>

                <div class="col-md-2 d-flex align-items-end">
                    <button type="submit" class="btn btn-primary w-100">T√¨m ki·∫øm</button>
                </div>
            </form>
        </div>
    </div>

    {{#if script}}
    <div class="alert alert-info mt-3">
        {{{script}}}
    </div>
    {{/if}}

    {{!-- Hi·ªÉn th·ªã danh s√°ch xu h∆∞·ªõng n·∫øu c√≥ --}}
    {{#if keywordList}}
    <div class="mt-4">
        <div class="d-flex justify-content-between align-items-center mb-3">
            <h5 class="text-primary mb-0">üîª Ch·ªß ƒë·ªÅ trending:</h5>
            <div class="btn-group btn-group-sm" role="group">
                <button type="button" class="btn btn-outline-secondary filter-btn {{#unless source}}active{{else}}{{#if (eq source 'all')}}active{{/if}}{{/unless}}" data-source="all">T·∫•t c·∫£</button>
                <button type="button" class="btn btn-outline-danger filter-btn {{#if (eq source 'youtube')}}active{{/if}}" data-source="youtube">
                    <i class="bi bi-youtube"></i> YouTube
                </button>
                <button type="button" class="btn btn-outline-info filter-btn {{#if (eq source 'wikipedia')}}active{{/if}}" data-source="wikipedia">
                    <i class="bi bi-wikipedia"></i> Wikipedia
                </button>
                <button type="button" class="btn btn-outline-success filter-btn {{#if (eq source 'google')}}active{{/if}}" data-source="google">
                    <i class="bi bi-google"></i> Google
                </button>
            </div>
        </div>
        
        <div class="list-group">
            {{#each keywordList}}
            <button type="button" class="list-group-item list-group-item-action keyword-btn d-flex justify-content-between align-items-center" 
                    data-source="{{this.source}}">
                <span>{{this.title}}</span>
                <div>
                    {{#if this.views}}
                    <span class="badge bg-secondary me-2">{{this.views}} l∆∞·ª£t xem</span>
                    {{/if}}
                    <span class="badge 
                        {{#if (eq this.source 'YouTube')}}bg-danger{{/if}}
                        {{#if (eq this.source 'Wikipedia')}}bg-info{{/if}}
                        {{#if (eq this.source 'Google Trends')}}bg-success{{/if}}">
                        {{this.source}}
                    </span>
                </div>
            </button>
            {{/each}}
        </div>
    </div>
    {{/if}}

    <!-- Spinner khi AI ƒëang x·ª≠ l√Ω -->
    <div id="loadingSpinner" class="text-center my-5 d-none">
        <div class="spinner-border text-primary" role="status" style="width: 3rem; height: 3rem;">
            <span class="visually-hidden">Loading...</span>
        </div>
        <p class="mt-3 text-muted">ƒêang sinh k·ªãch b·∫£n b·∫±ng AI...</p>
    </div>

    <!-- Script hi·ªÉn th·ªã ·ªü ƒë√¢y -->
    <div id="aiScriptContainer" class="mt-4 d-none">
        <div class="card border-info">
            <div class="card-header bg-info text-white d-flex justify-content-between align-items-center">
  <span>ü§ñ K·ªãch b·∫£n AI</span>
  <button id="copyScriptBtn" class="btn btn-sm btn-light text-info">
      <i class="bi bi-clipboard"></i> Sao ch√©p
  </button>
</div>

            <div class="card-body">
                <pre id="aiScriptContent" style="white-space: pre-wrap;" class="mb-0 text-dark"></pre>
            </div>
        </div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const keywordInput = document.getElementById('keyword');
    const scriptContainer = document.getElementById('aiScriptContainer');
    const scriptContent = document.getElementById('aiScriptContent');
    const loadingSpinner = document.getElementById('loadingSpinner');

    // üîß Th√™m c√°c bi·∫øn d∆∞·ªõi ƒë√¢y ƒë·ªÉ tr√°nh l·ªói ReferenceError
    const copyScriptBtn = document.getElementById('copyScriptBtn');
    const clearKeywordBtn = document.getElementById('clearKeyword');
    const suggestionsContainer = document.getElementById('suggestions');
    const sourceSelect = document.getElementById('source');

    let debounceTimer;

            document.querySelectorAll('.keyword-btn').forEach(btn => {
                btn.addEventListener('click', async () => {
                    const keyword = btn.textContent.trim();

                    // G√°n gi√° tr·ªã v√†o input t·ª´ kh√≥a
                    keywordInput.value = keyword;
                    clearKeywordBtn.style.display = 'block';

                    // B·∫Øt ƒë·∫ßu loading
                    loadingSpinner.classList.remove('d-none');
                    scriptContainer.classList.add('d-none');
                    scriptContent.textContent = '';

                    try {
                        const res = await fetch('/generate-script', {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({ keyword })
                        });

                        const data = await res.json();

                        if (data.success) {
                            scriptContent.textContent = data.script;
                            scriptContainer.classList.remove('d-none');
                            window.scrollTo({
                                top: scriptContainer.offsetTop - 20,
                                behavior: 'smooth'
                            });
                        } else {
                            alert(data.error || 'L·ªói kh√¥ng x√°c ƒë·ªãnh!');
                        }
                    } catch (err) {
                        alert('‚ùå L·ªói khi k·∫øt n·ªëi ƒë·∫øn m√°y ch·ªß ho·∫∑c AI.');
                    } finally {
                        loadingSpinner.classList.add('d-none');
                    }
                });
            });
            
            // X·ª≠ l√Ω n√∫t sao ch√©p
            copyScriptBtn.addEventListener('click', () => {
                const scriptText = scriptContent.textContent;
                navigator.clipboard.writeText(scriptText)
                    .then(() => {
                        const originalText = copyScriptBtn.innerHTML;
                        copyScriptBtn.innerHTML = '<i class="bi bi-check-lg"></i> ƒê√£ sao ch√©p';
                        setTimeout(() => {
                            copyScriptBtn.innerHTML = originalText;
                        }, 2000);
                    })
                    .catch(err => {
                        console.error('L·ªói khi sao ch√©p: ', err);
                    });
            });

            // X·ª≠ l√Ω nh·∫≠p t·ª´ kh√≥a
            keywordInput.addEventListener('input', function() {
                const query = this.value.trim();
                
                clearTimeout(debounceTimer);
                
                if (query.length < 2) {
                    suggestionsContainer.style.display = 'none';
                    return;
                }
                
                // ƒê·ª£i ng∆∞·ªùi d√πng ng·ª´ng g√µ 300ms r·ªìi m·ªõi g·ª≠i request
                debounceTimer = setTimeout(async () => {
                    // L·∫•y ngu·ªìn t·ª´ dropdown, n·∫øu l√† "all" th√¨ s·ª≠ d·ª•ng YouTube
                    const source = sourceSelect.value === 'all' ? 'youtube' : sourceSelect.value;
                    
                    try {
                        const response = await fetch(`/api/suggest?query=${encodeURIComponent(query)}&source=${source}`);
                        const suggestions = await response.json();
                        
                        if (suggestions.length > 0) {
                            renderSuggestions(suggestions, query);
                            suggestionsContainer.style.display = 'block';
                        } else {
                            suggestionsContainer.style.display = 'none';
                        }
                    } catch (error) {
                        console.error('L·ªói khi l·∫•y g·ª£i √Ω:', error);
                    }
                }, 300);
            });

            // Hi·ªÉn th·ªã g·ª£i √Ω
            function renderSuggestions(suggestions, query) {
                suggestionsContainer.innerHTML = '';
                
                suggestions.forEach(suggestion => {
                    const item = document.createElement('div');
                    item.className = 'suggestion-item';
                    
                    let icon, sourceClass;
                    
                    switch (suggestion.source) {
                        case 'YouTube':
                            icon = '<i class="bi bi-youtube" style="color: #FF0000;"></i>';
                            sourceClass = 'bg-danger';
                            break;
                        case 'Wikipedia':
                            icon = '<i class="bi bi-wikipedia" style="color: #000000;"></i>';
                            sourceClass = 'bg-info';
                            break;
                        default:
                            icon = '<i class="bi bi-search"></i>';
                            sourceClass = 'bg-primary';
                    }
                    
                    // Highlight query trong k·∫øt qu·∫£ g·ª£i √Ω
                    let text = suggestion.text;
                    if (query && text.toLowerCase().includes(query.toLowerCase())) {
                        const regex = new RegExp(`(${query})`, 'gi');
                        text = text.replace(regex, '<span class="highlight">$1</span>');
                    }
                    
                    let descriptionHtml = '';
                    if (suggestion.description) {
                        descriptionHtml = `<div class="description">${suggestion.description}</div>`;
                    }
                    
                    item.innerHTML = `
                        <div class="flex-grow-1">
                            ${icon} <span>${text}</span>
                            ${descriptionHtml}
                        </div>
                        <span class="source-badge ${sourceClass} text-white">${suggestion.source}</span>
                    `;
                    
                    item.addEventListener('click', () => {
                        keywordInput.value = suggestion.text;
                        suggestionsContainer.style.display = 'none';
                        clearKeywordBtn.style.display = 'block';
                        // N·∫øu l√† Wikipedia, c√≥ th·ªÉ m·ªü URL
                        if (suggestion.url && suggestion.source === 'Wikipedia') {
                            // L∆∞u URL v√†o data attribute ƒë·ªÉ s·ª≠ d·ª•ng sau n√†y n·∫øu c·∫ßn
                            keywordInput.setAttribute('data-wiki-url', suggestion.url);
                        }
                    });
                    
                    suggestionsContainer.appendChild(item);
                });
            }

            // ƒê√≥ng g·ª£i √Ω khi click ra ngo√†i
            document.addEventListener('click', (event) => {
                if (!keywordInput.contains(event.target) && 
                    !suggestionsContainer.contains(event.target) &&
                    !clearKeywordBtn.contains(event.target)) {
                    suggestionsContainer.style.display = 'none';
                }
            });

            // X·ª≠ l√Ω ph√≠m m≈©i t√™n ƒë·ªÉ ƒëi·ªÅu h∆∞·ªõng qua c√°c g·ª£i √Ω
            keywordInput.addEventListener('keydown', (event) => {
                const items = suggestionsContainer.querySelectorAll('.suggestion-item');
                const isVisible = suggestionsContainer.style.display === 'block';
                
                if (!isVisible || items.length === 0) return;
                
                // T√¨m item ƒëang ƒë∆∞·ª£c ch·ªçn
                const activeItem = suggestionsContainer.querySelector('.suggestion-item.active');
                let activeIndex = -1;
                
                if (activeItem) {
                    activeIndex = Array.from(items).indexOf(activeItem);
                }
                
                switch (event.key) {
                    case 'ArrowDown':
                        event.preventDefault();
                        if (activeIndex < items.length - 1) {
                            if (activeItem) activeItem.classList.remove('active');
                            items[activeIndex + 1].classList.add('active');
                            items[activeIndex + 1].scrollIntoView({ block: 'nearest' });
                        }
                        break;
                    
                    case 'ArrowUp':
                        event.preventDefault();
                        if (activeIndex > 0) {
                            if (activeItem) activeItem.classList.remove('active');
                            items[activeIndex - 1].classList.add('active');
                            items[activeIndex - 1].scrollIntoView({ block: 'nearest' });
                        }
                        break;
                    
                    case 'Enter':
                        if (activeItem) {
                            event.preventDefault(); // NgƒÉn form submit
                            activeItem.click();
                        }
                        break;
                        
                    case 'Escape':
                        suggestionsContainer.style.display = 'none';
                        break;
                }
            });
        });
    </script>
</div>
