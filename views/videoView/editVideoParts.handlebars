<!DOCTYPE html>
<html lang="vi">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Chỉnh sửa các phần video</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" />
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.0/font/bootstrap-icons.css" />
</head>
<body>
  <div class="container mt-5">
    <h1 class="text-center mb-4">Chỉnh Sửa Các Phần Video</h1>

    <!-- Thông tin trợ giúp -->
    <div class="alert alert-info">
      <p>Ở đây bạn có thể chỉnh sửa từng phần của video trước khi hoàn thiện. Với mỗi phần, bạn có thể:</p>
      <ul>
        <li>Tạo hình ảnh mới dựa trên mô tả hoặc từ khóa tuỳ chỉnh</li>
        <li>Tạo giọng đọc mới hoặc chỉnh sửa nội dung văn bản</li>
        <li>Thu âm giọng nói của chính bạn để thay thế giọng đọc AI</li>
      </ul>
      <p>Sau khi hoàn thành tất cả các phần, nhấn nút <strong>"Tạo Video"</strong> để kết hợp chúng.</p>
    </div>

    <!-- Tổng quan kịch bản -->
    <div class="mb-4" id="script-overview">
      <div class="card">
        <div class="card-header bg-primary text-white"><h3>Tổng Quan Kịch Bản</h3></div>
        <div class="card-body">
          <p id="script-preview"></p>
          <button class="btn btn-sm btn-outline-primary" id="toggle-script-btn">Hiển thị toàn bộ kịch bản</button>
          <div id="full-script" class="mt-2" style="display:none">
            <h5>Kịch bản đầy đủ:</h5>
            <div id="script-content" class="p-3 border rounded bg-light small"></div>
          </div>
        </div>
      </div>
    </div>

    <!-- Nhóm nút thao tác chung -->
    <div class="text-center mb-4">
      <div class="d-flex justify-content-center gap-3 flex-wrap">
        <button id="generate-all-btn" class="btn btn-warning"><i class="bi bi-magic"></i> Tạo tất cả</button>
        <button id="preview-edit-btn" class="btn btn-info"><i class="bi bi-pencil-square"></i> Xem trước &amp; chỉnh sửa</button>
        <button id="create-video-btn" class="btn btn-success"><i class="bi bi-film"></i> Tạo Video</button>
      </div>
      <div class="progress mt-2" id="global-progress" style="display:none">
        <div class="progress-bar progress-bar-striped progress-bar-animated" role="progressbar" style="width:0%"></div>
      </div>
      <small class="text-muted">Quá trình này có thể mất vài phút tuỳ thuộc vào số lượng phần</small>
    </div>

    <!-- Danh sách phần -->
    <div id="parts-container">
      <div class="text-center py-4">
        <div class="spinner-border text-primary" role="status"></div>
        <p>Đang tải dữ liệu…</p>
      </div>
    </div>

    <!-- Kết quả video -->
    <div class="mt-5" id="result-container" style="display:none">
      <div class="card">
        <div class="card-header bg-success text-white"><h3>Video Đã Tạo</h3></div>
        <div class="card-body">
          <video id="result-video" controls class="w-100 rounded shadow"></video>
        </div>
      </div>
    </div>

    <!-- Loader khi render -->
    <div class="mt-3" id="loading-container" style="display:none">
      <div class="d-flex justify-content-center">
        <div class="spinner-border text-primary" role="status"></div>
      </div>
      <p class="text-center mt-2">Đang tạo video, vui lòng đợi…</p>
    </div>
  </div>

  <!-- Template phần -->
  <template id="part-template">
    <div class="card mb-4 part-card">
      <div class="card-header"><h3 class="part-title"></h3></div>
      <div class="card-body">
        <div class="row g-3">
          <!-- Cột lời thoại & âm thanh -->
          <div class="col-lg-6">
            <div class="form-group">
              <label class="fw-bold">Lời thoại:</label>
              <textarea class="form-control text-content mb-2" rows="4"></textarea>
              <div class="btn-group btn-group-sm mb-2" role="group">
                <button class="btn btn-outline-primary regenerate-audio-btn"><i class="bi bi-robot"></i> Giọng đọc AI</button>
                <button class="btn btn-outline-secondary record-audio-btn"><i class="bi bi-record-circle"></i> Thu âm</button>
                <button class="btn btn-outline-danger stop-record-btn" style="display:none"><i class="bi bi-stop-circle"></i> Dừng</button>
              </div>
              <span class="text-danger small recording-status" style="display:none">● Đang ghi…</span>
              <div class="audio-container mt-2" style="display:none">
                <audio controls class="audio-player w-100 rounded shadow-sm">
                  <source type="audio/mpeg" />
                  Trình duyệt không hỗ trợ phát âm thanh.
                </audio>
              </div>
            </div>
          </div>

          <!-- Cột hình ảnh -->
          <div class="col-lg-6">
            <div class="form-group">
              <label class="fw-bold">Hình ảnh:</label>
              <p class="image-description small text-muted"></p>

              <div class="input-group input-group-sm mb-2">
                <input type="text" class="form-control custom-prompt" placeholder="Nhập mô tả hoặc để trống" />
                <button class="btn btn-outline-primary regenerate-image-btn"><i class="bi bi-image"></i></button>
              </div>

              <div class="mb-2">
                <input type="file" class="form-control upload-image d-none" accept="image/*" />
                <button class="btn btn-outline-secondary btn-sm upload-image-btn"><i class="bi bi-upload"></i> Tải ảnh</button>
              </div>

              <div class="image-container text-center position-relative border rounded" style="min-height:150px">
                <div class="placeholder-image d-flex align-items-center justify-content-center h-100 w-100 text-muted"></div>
                <img class="img-fluid part-image position-absolute top-0 start-0 w-100 h-100 object-fit-contain" style="display:none" />
              </div>
            </div>
          </div>
        </div>

        <!-- progress mỗi phần -->
        <div class="progress part-progress mt-3" style="display:none">
          <div class="progress-bar progress-bar-striped progress-bar-animated" role="progressbar" style="width:0%"></div>
        </div>
      </div>
    </div>
  </template>

  <!-- ========== SCRIPT ========== -->
  <script>
  (function(){
    /* ---------- Utils  ---------- */
    const apiFetch = async (endpoint, options = {}) => {
      const res = await fetch(`/api${endpoint.startsWith('/') ? endpoint : '/' + endpoint}`, options);
      if (!res.ok) {
        const text = await res.text();
        throw new Error(`${res.status} ${text}`);
      }
      return res.json();
    };

    /* ---------- Lấy dữ liệu sessionStorage ---------- */
    const sessionId     = sessionStorage.getItem('videoSessionId');
    const script        = sessionStorage.getItem('videoScript');
    const scriptParts   = JSON.parse(sessionStorage.getItem('videoScriptParts') || '[]');
    const voiceId       = sessionStorage.getItem('videoVoiceId');
    const aspectRatio   = sessionStorage.getItem('videoAspectRatio') || '16:9';

    if (!sessionId || !script || scriptParts.length === 0) {
      alert('Không tìm thấy dữ liệu kịch bản, vui lòng quay lại bước trước.');
      location.href = '/api/advanced-video';
      return;
    }

    /* ---------- Hiển thị kịch bản ---------- */
    document.getElementById('script-preview').textContent = script.slice(0, 150) + '…';
    document.getElementById('script-content').innerHTML  = script.replace(/\n/g, '<br>');
    document.getElementById('toggle-script-btn').onclick = e => {
      const target = document.getElementById('full-script');
      target.style.display = target.style.display === 'none' ? 'block' : 'none';
      e.target.textContent = target.style.display === 'none' ? 'Hiển thị toàn bộ kịch bản' : 'Ẩn kịch bản';
    };

    /* ---------- Render phần ---------- */
    const partsContainer = document.getElementById('parts-container');
    partsContainer.innerHTML = '';

    scriptParts.forEach((p, idx) => {
      const tpl       = document.getElementById('part-template').content.cloneNode(true);
      const card      = tpl.querySelector('.part-card');
      card.id         = `part-${p.id}`;
      card.dataset.partId = p.id;
      tpl.querySelector('.part-title').textContent = `Phần ${idx + 1}${p.part ? ': ' + p.part : ''}`;
      tpl.querySelector('.text-content').value     = p.text;
      tpl.querySelector('.image-description').textContent = p.image || 'Không có mô tả hình ảnh';

      partsContainer.appendChild(tpl);
      setupImageHandlers(p.id);
      setupAudioHandlers(p.id);
      setupRecordingHandlers(p.id);
    });

    /* ---------- Generate ALL ---------- */
    document.getElementById('generate-all-btn').onclick = () => bulkGenerate();
    async function bulkGenerate(){
      const btn   = document.getElementById('generate-all-btn');
      const bar   = document.querySelector('#global-progress .progress-bar');
      const prog  = document.getElementById('global-progress');
      btn.disabled = true; prog.style.display='block';

      const totalOps = scriptParts.length * 2; // image + audio
      let done = 0;
      const update = msg => {
        const pct = Math.round((done/totalOps)*100);
        bar.style.width = pct + '%';
        bar.textContent = msg + ` (${pct}%)`;
      };

      for(const s of scriptParts){
        const partEl = document.getElementById(`part-${s.id}`);
        partEl.scrollIntoView({behavior:'smooth', block:'center'});

        // image
        try{
          update('Tạo hình ảnh…');
          const prompt = partEl.querySelector('.custom-prompt').value.trim();
          const imgRes = await apiFetch('/advanced-video/generate-image-for-part', {
            method:'POST',
            headers:{'Content-Type':'application/json'},
            body: JSON.stringify({sessionId, partId: s.id, customPrompt: prompt})
          });
          showImage(partEl, imgRes.imagePath);
        }catch(e){ console.error(e); }
        done++; update('Đang xử lý');

        // audio
        try{
          update('Tạo giọng đọc…');
          const text = partEl.querySelector('.text-content').value.trim();
          if(text){
            const audRes = await apiFetch('/advanced-video/generate-audio-for-part', {
              method:'POST',
              headers:{'Content-Type':'application/json'},
              body: JSON.stringify({sessionId, partId:s.id, voiceId, customText:text})
            });
            showAudio(partEl, audRes.audioPath);
          }
        }catch(e){ console.error(e); }
        done++; update('Đang xử lý');
      }

      bar.classList.remove('progress-bar-animated');
      bar.classList.add('bg-success');
      bar.textContent = 'Hoàn thành!';
      btn.disabled    = false;
    }

    /* ---------- Preview & edit ---------- */
    document.getElementById('preview-edit-btn').onclick = () => {
      const parts = Array.from(document.querySelectorAll('.part-card')).map(c => ({
        partId: c.dataset.partId,
        text  : c.querySelector('.text-content').value.trim(),
        imagePath: c.querySelector('.part-image').src || '',
        audioPath: c.querySelector('.audio-player source').src || ''
      }));
      sessionStorage.setItem('videoPreviewData', JSON.stringify({sessionId, scriptParts: parts}));
      location.href = '/video-editor';
    };

    /* ---------- Finalize video ---------- */
    document.getElementById('create-video-btn').onclick = async () => {
      document.getElementById('loading-container').style.display='block';
      document.getElementById('create-video-btn').disabled = true;
      try{
        const res = await apiFetch('/advanced-video/finalize-video', {
          method:'POST',
          headers:{'Content-Type':'application/json'},
          body: JSON.stringify({sessionId, aspectRatio})
        });
        document.getElementById('result-video').src = res.videoUrl;
        document.getElementById('result-container').style.display='block';
        document.getElementById('result-container').scrollIntoView({behavior:'smooth'});
      }catch(e){ alert('Tạo video lỗi: '+e.message); }
      document.getElementById('loading-container').style.display='none';
      document.getElementById('create-video-btn').disabled = false;
    };

    /* ---------- Helpers hiển thị ---------- */
    function showImage(card, src){
      card.querySelector('.placeholder-image').style.display='none';
      const img = card.querySelector('.part-image');
      img.src = src; img.style.display='block';
    }
    function showAudio(card, src){
      const wrap = card.querySelector('.audio-container');
      wrap.style.display='block';
      const audio = card.querySelector('.audio-player');
      audio.querySelector('source').src = src; audio.load();
    }

    /* ---------- Handlers cho từng phần ---------- */
    function setupImageHandlers(partId){
      const card      = document.getElementById(`part-${partId}`);
      const genBtn    = card.querySelector('.regenerate-image-btn');
      const uploadBtn = card.querySelector('.upload-image-btn');
      const fileInput = card.querySelector('.upload-image');
      const customPrompt = card.querySelector('.custom-prompt');
      const progress  = card.querySelector('.part-progress');
      const bar       = progress.querySelector('.progress-bar');

      // Upload file từ máy
      uploadBtn.onclick = () => fileInput.click();
      fileInput.onchange = async e => {
        if(!e.target.files[0]) return;
        progress.style.display='block'; bar.style.width='0%';
        const form = new FormData();
        form.append('image', e.target.files[0]);
        form.append('sessionId', sessionId);
        form.append('partId', partId);
        try{
          const res = await apiFetch('/advanced-video/upload-image-for-part', {method:'POST', body: form});
          showImage(card, res.imagePath); bar.style.width='100%';
          setTimeout(()=>progress.style.display='none', 1500);
        }catch(err){ bar.classList.add('bg-danger'); bar.textContent='Lỗi'; alert(err.message); }
      };

      // Sinh ảnh AI
      genBtn.onclick = async () => {
        progress.style.display='block'; bar.style.width='15%'; bar.textContent='Đang tạo…';
        try{
          const res = await apiFetch('/advanced-video/generate-image-for-part', {
            method:'POST',
            headers:{'Content-Type':'application/json'},
            body: JSON.stringify({sessionId, partId, customPrompt: customPrompt.value.trim()})
          });
          showImage(card, res.imagePath); bar.style.width='100%';
          setTimeout(()=>progress.style.display='none', 1500);
        }catch(err){ bar.classList.add('bg-danger'); bar.textContent='Lỗi'; alert(err.message); }
      };
    }

    function setupAudioHandlers(partId){
      const card   = document.getElementById(`part-${partId}`);
      const genBtn = card.querySelector('.regenerate-audio-btn');
      const textEl = card.querySelector('.text-content');
      const progress = card.querySelector('.part-progress');
      const bar      = progress.querySelector('.progress-bar');

      genBtn.onclick = async () => {
        if(!textEl.value.trim()) return alert('Vui lòng nhập lời thoại');
        progress.style.display='block'; bar.style.width='15%'; bar.textContent='Đang tạo…';
        try{
          const res = await apiFetch('/advanced-video/generate-audio-for-part', {
            method:'POST',
            headers:{'Content-Type':'application/json'},
            body: JSON.stringify({sessionId, partId, voiceId, customText: textEl.value.trim()})
          });
          showAudio(card, res.audioPath); bar.style.width='100%';
          setTimeout(()=>progress.style.display='none', 1500);
        }catch(err){ bar.classList.add('bg-danger'); bar.textContent='Lỗi'; alert(err.message); }
      };
    }

    function setupRecordingHandlers(partId){
      const card      = document.getElementById(`part-${partId}`);
      const recBtn    = card.querySelector('.record-audio-btn');
      const stopBtn   = card.querySelector('.stop-record-btn');
      const statusLbl = card.querySelector('.recording-status');
      const progress  = card.querySelector('.part-progress');
      const bar       = progress.querySelector('.progress-bar');
      const audioWrap = card.querySelector('.audio-container');
      const audioTag  = card.querySelector('.audio-player');
      let   recorder, chunks = [];

      if(!navigator.mediaDevices?.getUserMedia){
        recBtn.disabled = true; recBtn.title = 'Trình duyệt không hỗ trợ thu âm';
        return;
      }

      recBtn.onclick = async () => {
        try{
          const stream = await navigator.mediaDevices.getUserMedia({audio:true});
          recorder = new MediaRecorder(stream);
          chunks   = [];
          recorder.ondataavailable = e => chunks.push(e.data);
          recorder.onstop = async() => {
            const blob = new Blob(chunks, {type:'audio/webm'});
            const url  = URL.createObjectURL(blob);
            audioWrap.style.display='block';
            audioTag.querySelector('source').src = url; audioTag.load();
            await uploadBlob(blob);
          };
          recorder.start();
          recBtn.classList.add('disabled');
          stopBtn.style.display='inline-block'; statusLbl.style.display='inline';
        }catch(err){ alert('Không thể truy cập micro: '+err.message); }
      };

      stopBtn.onclick = () => {
        recorder?.state === 'recording' && recorder.stop();
        recBtn.classList.remove('disabled');
        stopBtn.style.display='none'; statusLbl.style.display='none';
      };

      async function uploadBlob(blob){
        progress.style.display='block'; bar.style.width='25%'; bar.textContent='Đang tải…';
        const form = new FormData();
        form.append('audio', blob, `record_${Date.now()}.webm`);
        form.append('sessionId', sessionId);
        form.append('partId', partId);
        try{
          const res = await apiFetch('/advanced-video/upload-audio-for-part', {method:'POST', body: form});
          audioTag.querySelector('source').src = res.audioPath; audioTag.load();
          bar.style.width='100%'; bar.textContent='Hoàn thành!';
          setTimeout(()=>progress.style.display='none', 1500);
        }catch(err){ bar.classList.add('bg-danger'); bar.textContent='Lỗi'; alert('Upload audio lỗi: '+err.message); }
      }
    }
  })();
  </script>
</body>
</html>
