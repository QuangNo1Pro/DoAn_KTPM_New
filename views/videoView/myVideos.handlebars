{{!-- views/videoView/myVideos.handlebars --}}
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
<link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css" rel="stylesheet">

<div class="container my-5">
  <h2 class="mb-4 text-center text-warning">üìÅ Video c·ªßa b·∫°n</h2>

  {{#if videos.length}}
  <div class="table-responsive">
    <table class="table table-dark table-striped align-middle">
      <thead>
        <tr>
          <th>#</th>
          <th>Ti√™u ƒë·ªÅ</th>
          <th>Dung l∆∞·ª£ng (MB)</th>
          <th>Xem</th>
          <th>Up YouTube</th>
          <th>Xo√°</th>
        </tr>
      </thead>
      <tbody>
        {{#each videos}}
        <tr id="row-{{id}}">
          <td>{{id}}</td>
          <td>{{title}}</td>
          <td>{{size_mb}}</td>
          <td>
            <a class="btn btn-sm btn-outline-info" href="{{public_url}}" target="_blank" title="Xem video">
              <i class="bi bi-play-circle"></i> Xem
            </a>
          </td>
          <td>
            <button class="btn btn-sm btn-outline-danger btn-youtube" title="Up video n√†y l√™n YouTube" data-id="{{id}}"
              data-url="{{local_path}}" data-title="{{title}}" >
              <i class="bi bi-youtube"></i> YouTube
            </button>
          </td>
          <td>
            <button class="btn btn-sm btn-outline-danger btn-del" title="Xo√° video n√†y" data-id="{{id}}">
              <i class="bi bi-trash"></i> Xo√°
            </button>
          </td>
        </tr>
        {{/each}}
      </tbody>
    </table>
  </div>
  {{else}}
  <p class="text-center text-muted">Ch∆∞a c√≥ video n√†o.</p>
  {{/if}}
</div>

<script>
  document.querySelectorAll('.btn-del').forEach(btn => {
    btn.addEventListener('click', async () => {
      const id = btn.dataset.id;
      if (!confirm('Xo√° video #' + id + ' ?')) return;
      try {
        const res = await fetch('/api/videos/' + id, { method: 'DELETE' });
        const js = await res.json();
        if (js.success) {
          document.getElementById('row-' + id)?.remove();
        } else {
          alert('L·ªói: ' + (js.error || 'kh√¥ng r√µ'));
        }
      } catch (e) {
        console.error(e);
        alert('‚ùå Xo√° th·∫•t b·∫°i! Xem console ƒë·ªÉ bi·∫øt th√™m chi ti·∫øt.');
      }
    });
  });

  document.querySelectorAll('.btn-youtube').forEach(btn => {
      btn.addEventListener('click', async () => {
        const id = btn.dataset.id;
        const url = btn.dataset.url;
        const title = btn.dataset.title;

        console.log('Up video #' + id + ' v·ªõi URL:', url);
        if (!url) {
          alert('‚ùå Thi·∫øu URL video.');
          return;
        }

        if (!confirm('B·∫°n mu·ªën up video #' + id + ' l√™n YouTube?')) return;

        btn.disabled = true;
        btn.innerHTML = '<span class="spinner-border spinner-border-sm"></span> ƒêang up...';

        try {
          const res = await fetch('/api/videos/' + id + '/upload-youtube', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            credentials: 'include',
            body: JSON.stringify({ url,title })
          });

          const contentType = res.headers.get("content-type") || '';
          const text = await res.text();
          let js;

          if (!res.ok) {
            // N·∫øu l√† l·ªói 401 ‚Üí kh√¥ng ƒëƒÉng nh·∫≠p
            if (res.status === 401) {
              alert('‚ùå B·∫°n ch∆∞a ƒëƒÉng nh·∫≠p. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.');
              window.location.href = '/login';
              return;
            }

            // N·∫øu l√† HTML (nh∆∞ trang login), kh√¥ng ph·∫£i JSON
            if (!contentType.includes("application/json")) {
              console.error('‚ùå Server tr·∫£ v·ªÅ HTML thay v√¨ JSON:', text);
              alert('L·ªói: Server tr·∫£ v·ªÅ kh√¥ng h·ª£p l·ªá (HTML)');
              return;
            }
          }

          // Th·ª≠ parse JSON
          try {
            js = JSON.parse(text);
          } catch (err) {
            console.error('‚ùå Kh√¥ng ph·∫£i JSON:', text);
            alert('L·ªói: Server tr·∫£ v·ªÅ kh√¥ng h·ª£p l·ªá:\n' + text);
            return;
          }

          // X·ª≠ l√Ω k·∫øt qu·∫£ t·ª´ server
          if (js.success) {
            alert('‚úÖ ƒê√£ up l√™n YouTube!\nüëâ ' + js.youtubeUrl);
          } else {
            alert('‚ùå Upload th·∫•t b·∫°i: ' + (js.error || 'Kh√¥ng r√µ l·ªói'));
          }

        } catch (e) {
          console.error('‚ùå L·ªói khi g·ªçi API upload:', e);
          alert('‚ùå Upload th·∫•t b·∫°i. Vui l√≤ng ki·ªÉm tra console ho·∫∑c th·ª≠ l·∫°i sau.');
        }

        btn.disabled = false;
        btn.innerHTML = '<i class="bi bi-youtube"></i> YouTube';
      });
  });
</script>