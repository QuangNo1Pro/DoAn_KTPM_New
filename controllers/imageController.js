const { generateImageByImagen } = require('../services/imagenService');

const generateImage = async (req, res) => {
  const { prompt, modelType = 'ultra', imageCount = 1 } = req.body;
  
  console.log('Generate image request:', { prompt, modelType, imageCount });
  
  try {
    if (!prompt || typeof prompt !== 'string' || prompt.trim() === '') {
      return res.status(400).json({ 
        success: false, 
        error: 'Vui l√≤ng nh·∫≠p prompt ƒë·ªÉ t·∫°o ·∫£nh.' 
      });
    }
    
    // Gi·ªõi h·∫°n s·ªë l∆∞·ª£ng ·∫£nh t·ª´ 1-4
    const count = Math.min(Math.max(parseInt(imageCount) || 1, 1), 4);
    
    // X√°c ƒë·ªãnh model type
    let actualModelType = 'standard';
    if (['ultra', 'standard', 'fast'].includes(modelType)) {
      actualModelType = modelType;
    }
    
    try {
      // G·ªçi service ƒë·ªÉ t·∫°o ·∫£nh
      console.log(`üñºÔ∏è ƒêang g·ªçi Imagen API (${actualModelType}) ƒë·ªÉ t·∫°o ${count} ·∫£nh...`);
      
      const images = await generateImageByImagen(prompt, {
        modelType: actualModelType,
        imageCount: count,
        retryDelay: 5000, // 5 gi√¢y
        maxRetries: 5     // Th·ª≠ t·ªëi ƒëa 5 l·∫ßn
      });
      
      console.log(`‚úÖ ƒê√£ t·∫°o th√†nh c√¥ng ${images.length} ·∫£nh`);
      
      // Tr·∫£ v·ªÅ k·∫øt qu·∫£
      return res.json({
        success: true,
        images: images,
        model: actualModelType
      });
    } catch (error) {
      console.error('‚ùå L·ªói khi t·∫°o ·∫£nh:', error);
      return res.status(500).json({ 
        success: false, 
        error: `Kh√¥ng th·ªÉ t·∫°o ·∫£nh: ${error.message}` 
      });
    }
  } catch (error) {
    console.error('‚ùå L·ªói x·ª≠ l√Ω request:', error);
    return res.status(500).json({ 
      success: false, 
      error: 'ƒê√£ x·∫£y ra l·ªói khi x·ª≠ l√Ω y√™u c·∫ßu.' 
    });
  }
};

module.exports = {
  generateImage
}; 