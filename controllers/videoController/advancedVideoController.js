require('dotenv').config();
const path = require('path');
const fs = require('fs');
const util = require('util');
const { execSync } = require('child_process');
const axios = require('axios');
const { generateScriptByVertexAI } = require('../../services/vertexService');
const { VIETNAMESE_VOICES } = require('../../services/textToSpeechService');
const textToSpeech = require('@google-cloud/text-to-speech');
const multer = require('multer');
// ƒê√£ x√≥a import imagenService ƒë·ªÉ ch·ªâ s·ª≠ d·ª•ng imageController

// Thi·∫øt l·∫≠p multer cho vi·ªác t·∫£i l√™n file
const storage = multer.diskStorage({
  destination: function (req, file, cb) {
    const tempDir = path.join(__dirname, '../../public/temp');
    if (!fs.existsSync(tempDir)) {
      fs.mkdirSync(tempDir, { recursive: true });
    }
    cb(null, tempDir);
  },
  filename: function (req, file, cb) {
    const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9);
    const ext = path.extname(file.originalname);
    cb(null, 'user_upload_' + uniqueSuffix + ext);
  }
});

const fileFilter = (req, file, cb) => {
  // Ch·ªâ ch·∫•p nh·∫≠n c√°c file ·∫£nh
  if (file.mimetype.startsWith('image/')) {
    cb(null, true);
  } else {
    cb(new Error('Ch·ªâ ch·∫•p nh·∫≠n file h√¨nh ·∫£nh!'), false);
  }
};

const upload = multer({ 
  storage: storage,
  limits: {
    fileSize: 5 * 1024 * 1024 // 5MB limit
  },
  fileFilter: fileFilter
});

// ƒê∆∞·ªùng d·∫´n ƒë·∫øn file credentials cho Text-to-Speech
const ttsCredentialsPath = path.join(__dirname, '../../text to speed.json');

// Kh·ªüi t·∫°o client Text-to-Speech
let ttsClient;
try {
  ttsClient = new textToSpeech.TextToSpeechClient({
    keyFilename: ttsCredentialsPath
  });
  console.log('‚úì ƒê√£ kh·ªüi t·∫°o Text-to-Speech client th√†nh c√¥ng');
} catch (error) {
  console.error('‚ùå L·ªói kh·ªüi t·∫°o Text-to-Speech client:', error.message);
}

/**
 * Tr√≠ch xu·∫•t c√°c ph·∫ßn t·ª´ k·ªãch b·∫£n
 */
function extractScriptParts(script) {
  const parts = [];
  
  // Chu·∫©n h√≥a script ƒë·ªÉ ƒë·∫£m b·∫£o d·∫•u xu·ªëng d√≤ng nh·∫•t qu√°n
  const normalizedScript = script.replace(/\r\n/g, '\n').replace(/\r/g, '\n');
  
  // Regex ƒë·ªÉ t√¨m c√°c ph·∫ßn trong k·ªãch b·∫£n (l√†m linh ho·∫°t h∆°n) - h·ªó tr·ª£ c·∫£ ƒë·ªãnh d·∫°ng m·ªõi v√† c≈©
  const partRegex = /((?:##?\s*)?PH·∫¶N\s+(\d+|CU·ªêI|1:\s*HOOK)[\s\S]*?)(?:(?:\*\*)?L·ªùi\s*tho·∫°i:?(?:\*\*)?\s*)([\s\S]*?)(?:(?:(?:\*\*)?H√¨nh\s*·∫£nh:?(?:\*\*)?\s*)([\s\S]*?))?(?=\s*(?:(?:##?\s*)?PH·∫¶N|\s*(?:##?\s*)?PH·∫¶N CU·ªêI)|\s*$)/gi;
  
  console.log('üîç ƒêang ph√¢n t√≠ch k·ªãch b·∫£n...');
  console.log('üìù ƒêo·∫°n ƒë·∫ßu k·ªãch b·∫£n:', normalizedScript.substring(0, 200));
  
  let match;
  while ((match = partRegex.exec(normalizedScript)) !== null) {
    const [fullMatch, sectionHeader, part, text, image] = match;
    
    // Th√™m log ƒë·ªÉ ki·ªÉm tra t·ª´ng match
    console.log(`‚úÖ T√¨m th·∫•y PH·∫¶N ${part}:`);
    console.log(`   L·ªùi tho·∫°i: ${text ? text.substring(0, 30) + '...' : 'kh√¥ng c√≥'}`);
    console.log(`   H√¨nh ·∫£nh: ${image ? 'c√≥' : 'kh√¥ng c√≥'}`);
    
    parts.push({
      part: part.trim(),
      text: text ? text.trim() : '',
      image: image ? image.trim() : ''
    });
  }
  
  return parts;
}

/**
 * Chuy·ªÉn vƒÉn b·∫£n th√†nh gi·ªçng n√≥i
 */
async function convertTextToSpeech(text, outputPath, voiceId = VIETNAMESE_VOICES.FEMALE_NEURAL_A) {
  try {
    if (!text || text.trim() === '') {
      throw new Error('VƒÉn b·∫£n kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng');
    }

    console.log(`üîä ƒêang chuy·ªÉn vƒÉn b·∫£n th√†nh gi·ªçng n√≥i v·ªõi gi·ªçng ${voiceId}...`);

    // T·∫°o th∆∞ m·ª•c ƒë·∫ßu ra n·∫øu ch∆∞a t·ªìn t·∫°i
    const outputDir = path.dirname(outputPath);
    if (!fs.existsSync(outputDir)) {
      fs.mkdirSync(outputDir, { recursive: true });
    }

    // C·∫•u h√¨nh request
    const request = {
      input: { text },
      voice: {
        languageCode: 'vi-VN',
        name: voiceId,
      },
      audioConfig: {
        audioEncoding: 'MP3',
        pitch: 0,
        speakingRate: 1.0,
        volumeGainDb: 0.0
      },
    };

    // G·ªçi API ƒë·ªÉ chuy·ªÉn vƒÉn b·∫£n th√†nh gi·ªçng n√≥i
    const [response] = await ttsClient.synthesizeSpeech(request);
    
    // Ghi file √¢m thanh
    await util.promisify(fs.writeFile)(outputPath, response.audioContent, 'binary');
    
    console.log(`‚úì ƒê√£ t·∫°o file gi·ªçng n√≥i t·∫°i: ${outputPath}`);
    return outputPath;
  } catch (error) {
    console.error('‚ùå L·ªói khi chuy·ªÉn vƒÉn b·∫£n th√†nh gi·ªçng n√≥i:', error);
    throw error;
  }
}

/**
 * Ph√¢n t√≠ch k·ªãch b·∫£n v√† t·∫°o file √¢m thanh cho t·ª´ng ph·∫ßn
 */
async function createAudioForScript(script, outputDir, voiceId = VIETNAMESE_VOICES.FEMALE_NEURAL_A) {
  try {
    // Ki·ªÉm tra v√† t·∫°o th∆∞ m·ª•c ƒë·∫ßu ra
    if (!fs.existsSync(outputDir)) {
      fs.mkdirSync(outputDir, { recursive: true });
    }

    // Tr√≠ch xu·∫•t c√°c ph·∫ßn t·ª´ k·ªãch b·∫£n
    const scriptParts = extractScriptParts(script);
    console.log(`ƒê√£ t√¨m th·∫•y ${scriptParts.length} ph·∫ßn trong k·ªãch b·∫£n`);

    // T·∫°o √¢m thanh cho t·ª´ng ph·∫ßn
    const audioResults = [];
    
    for (let i = 0; i < scriptParts.length; i++) {
      const part = scriptParts[i];
      const outputPath = path.join(outputDir, `part_${i + 1}.mp3`);
      
      console.log(`ƒêang x·ª≠ l√Ω ph·∫ßn ${i + 1}/${scriptParts.length}: "${part.text.substring(0, 30)}..."`);
      
      try {
        const audioPath = await convertTextToSpeech(part.text, outputPath, voiceId);
        audioResults.push({
          ...part,
          audioPath
        });
      } catch (error) {
        console.error(`L·ªói khi x·ª≠ l√Ω ph·∫ßn ${i + 1}:`, error.message);
        // Ti·∫øp t·ª•c v·ªõi ph·∫ßn ti·∫øp theo n·∫øu c√≥ l·ªói
      }
    }

    console.log(`‚úì ƒê√£ t·∫°o ${audioResults.length}/${scriptParts.length} file √¢m thanh`);
    return audioResults;
  } catch (error) {
    console.error('‚ùå L·ªói khi t·∫°o √¢m thanh cho k·ªãch b·∫£n:', error);
    throw error;
  }
}

/**
 * Tr√≠ch xu·∫•t t·ª´ kh√≥a t·ª´ m√¥ t·∫£ h√¨nh ·∫£nh
 */
function extractKeywordsFromDescription(description) {
  if (!description) return [];
  
  // Danh s√°ch t·ª´ kh√¥ng mang nhi·ªÅu √Ω nghƒ©a t√¨m ki·∫øm
  const stopWords = ['v√†', 'ho·∫∑c', 'c·ªßa', 'v·ªõi', 'trong', 'ngo√†i', 'tr√™n', 'd∆∞·ªõi', 'm·ªôt', 'c√≥', 'l√†', 'c√°c', 'nh·ªØng',
    'ƒë∆∞·ª£c', 's·∫Ω', 'ƒëang', 'ƒë√£', 'n√†y', 'khi', 'v·ªÅ', 'nh∆∞', 'c√≥ th·ªÉ', 't·∫°i', 'b·ªüi', 'v√¨', 't·ª´', 'ƒë·ªÉ', 'ƒë·∫øn'];
  
  // T√°ch t·ª´ v√† l·ªçc
  const words = description
    .toLowerCase()
    .replace(/[.,\/#!$%\^&\*;:{}=\-_`~()]/g, ' ')
    .split(/\s+/)
    .filter(word => word.length > 3 && !stopWords.includes(word));
  
  // L·∫•y c√°c t·ª´/c·ª•m t·ª´ quan tr·ªçng
  const importantWords = [];
  const matches = description.match(/(?:"([^"]+)"|\(([^)]+)\)|([A-Z][a-z]+(?:\s+[A-Z][a-z]+)+))/g) || [];
  
  // Th√™m t·ª´/c·ª•m t·ª´ quan tr·ªçng
  matches.forEach(match => {
    const cleanMatch = match.replace(/["()]/g, '').trim();
    if (cleanMatch.length > 3) {
      importantWords.push(cleanMatch);
    }
  });
  
  // K·∫øt h·ª£p t·ª´ quan tr·ªçng v√† t·ª´ d√†i
  const keywords = [...new Set([...importantWords, ...words.filter(w => w.length > 5).slice(0, 5)])];
  return keywords.slice(0, 3); // Gi·ªõi h·∫°n 3 t·ª´ kh√≥a cho m·ªói m√¥ t·∫£
}

/**
 * T·∫£i h√¨nh ·∫£nh t·ª´ Unsplash d·ª±a tr√™n t·ª´ kh√≥a
 */
async function downloadImagesForKeywords(keywords, tempDir) {
  // T·∫°o th∆∞ m·ª•c l∆∞u tr·ªØ t·∫°m th·ªùi n·∫øu ch∆∞a t·ªìn t·∫°i
  if (!fs.existsSync(tempDir)) {
    fs.mkdirSync(tempDir, { recursive: true });
  }
  
  const imageFiles = [];
  
  // T·∫°o ·∫£nh cho t·ª´ng t·ª´ kh√≥a b·∫±ng imageController API
  for (const keyword of keywords) {
    try {
      console.log(`üñºÔ∏è ƒêang t·∫°o ·∫£nh cho t·ª´ kh√≥a: ${keyword}`);
      
      // Th√™m ƒë·ªô tr·ªÖ tr∆∞·ªõc khi g·ªçi API ƒë·ªÉ tr√°nh rate limit (tƒÉng l√™n 10 gi√¢y)
      await new Promise(resolve => setTimeout(resolve, 10000));
      
      // G·ªçi API imageController ƒë·ªÉ t·∫°o ·∫£nh
      const response = await axios.post('http://localhost:3000/api/image/generate', {
        prompt: keyword,
        modelType: 'standard', // C√≥ th·ªÉ ch·ªçn 'ultra', 'standard', ho·∫∑c 'fast' t√πy nhu c·∫ßu
        imageCount: 1
      });
      
      if (response.data.success && response.data.images && response.data.images.length > 0) {
        // L∆∞u ·∫£nh v√†o th∆∞ m·ª•c t·∫°m
        const filePath = path.join(tempDir, `${keyword.replace(/\s+/g, '_')}_${Date.now()}.jpg`);
        
        // Ki·ªÉm tra lo·∫°i d·ªØ li·ªáu h√¨nh ·∫£nh tr·∫£ v·ªÅ
        if (response.data.images[0].type === 'base64') {
          // N·∫øu l√† d·ªØ li·ªáu base64, chuy·ªÉn th√†nh file
          fs.writeFileSync(filePath, Buffer.from(response.data.images[0].imageData, 'base64'));
        } else if (response.data.images[0].type === 'url') {
          // N·∫øu l√† URL, t·∫£i file v·ªÅ
          const imgResponse = await axios.get(response.data.images[0].imageData, { responseType: 'arraybuffer' });
          fs.writeFileSync(filePath, Buffer.from(imgResponse.data));
        }
        
        // Th√™m v√†o danh s√°ch ·∫£nh ƒë√£ t·∫°o
        imageFiles.push({
          keyword,
          path: filePath
        });
        
        console.log(`‚úÖ ƒê√£ t·∫°o th√†nh c√¥ng ·∫£nh cho t·ª´ kh√≥a: ${keyword}`);
      } else {
        throw new Error('Kh√¥ng nh·∫≠n ƒë∆∞·ª£c ·∫£nh t·ª´ imageController API');
      }
    } catch (error) {
      console.error(`‚ùå L·ªói khi t·∫°o ·∫£nh cho t·ª´ kh√≥a ${keyword}:`, error.message);
      // Kh√¥ng s·ª≠ d·ª•ng ph∆∞∆°ng ph√°p d·ª± ph√≤ng, ch·ªâ ghi log l·ªói v√† ti·∫øp t·ª•c v·ªõi t·ª´ kh√≥a ti·∫øp theo
    }
  }
  
  // N·∫øu kh√¥ng t·∫°o ƒë∆∞·ª£c ·∫£nh n√†o, s·ª≠ d·ª•ng ·∫£nh m·∫∑c ƒë·ªãnh t·ª´ th∆∞ m·ª•c public/image
  if (imageFiles.length === 0) {
    console.log('‚ö†Ô∏è S·ª≠ d·ª•ng ·∫£nh m·∫∑c ƒë·ªãnh do kh√¥ng t·∫°o ƒë∆∞·ª£c ·∫£nh t·ª´ t·ª´ kh√≥a');
    const defaultImages = [
      path.join(__dirname, '../../public/image/image1.png'),
      path.join(__dirname, '../../public/image/image2.png')
    ];
    
    for (const img of defaultImages) {
      if (fs.existsSync(img)) {
        imageFiles.push({
          keyword: 'default',
          path: img
        });
      }
    }
  }
  
  return imageFiles;
}

/**
 * T·∫£i h√¨nh ·∫£nh cho t·ª´ng ph·∫ßn k·ªãch b·∫£n
 */
async function downloadImagesForScriptParts(scriptParts, tempDir) {
  const results = [];
  
  // T·∫£i ·∫£nh cho t·ª´ng ph·∫ßn d·ª±a tr√™n m√¥ t·∫£
  for (const part of scriptParts) {
    // S·ª≠ d·ª•ng m√¥ t·∫£ h√¨nh ·∫£nh n·∫øu c√≥
    if (part.image && part.image.trim() !== '') {
      const keywords = extractKeywordsFromDescription(part.image);
      
      if (keywords.length > 0) {
        const images = await downloadImagesForKeywords(keywords, tempDir);
        if (images.length > 0) {
          results.push({
            ...part,
            imagePath: images[0].path
          });
          continue;
        }
      }
    }
    
    // N·∫øu kh√¥ng c√≥ m√¥ t·∫£ ho·∫∑c kh√¥ng t√¨m ƒë∆∞·ª£c ·∫£nh, d√πng vƒÉn b·∫£n ƒë·ªÉ tr√≠ch xu·∫•t t·ª´ kh√≥a
    const textKeywords = part.text
      .split(/\s+/)
      .filter(word => word.length > 4)
      .filter(word => !['nh∆∞', 'nh∆∞ng', 'ho·∫∑c', 'nh·ªØng', 'ƒë∆∞·ª£c', 'trong', 'c√πng'].includes(word.toLowerCase()))
      .slice(0, 2);
    
    if (textKeywords.length > 0) {
      const images = await downloadImagesForKeywords(textKeywords, tempDir);
      if (images.length > 0) {
        results.push({
          ...part,
          imagePath: images[0].path
        });
        continue;
      }
    }
    
    // N·∫øu v·∫´n kh√¥ng c√≥ ·∫£nh, th√™m ph·∫ßn kh√¥ng c√≥ ·∫£nh
    results.push({
      ...part,
      imagePath: null
    });
  }
  
  // N·∫øu kh√¥ng c√≥ ·∫£nh cho b·∫•t k·ª≥ ph·∫ßn n√†o, t·∫£i m·ªôt s·ªë ·∫£nh m·∫∑c ƒë·ªãnh
  if (results.every(r => !r.imagePath)) {
    const defaultImages = await downloadImagesForKeywords(['presentation', 'background', 'minimal'], tempDir);
    
    // G√°n ·∫£nh m·∫∑c ƒë·ªãnh cho c√°c ph·∫ßn
    for (let i = 0; i < results.length; i++) {
      const imgIndex = i % defaultImages.length;
      results[i].imagePath = defaultImages[imgIndex]?.path || null;
    }
  }
  
  return results;
}

/**
 * T·∫°o video t·ª´ h√¨nh ·∫£nh v√† √¢m thanh s·ª≠ d·ª•ng FFmpeg
 */
async function createVideoWithAudio(scriptPartsWithMedia, outputPath) {
  try {
    console.log('üé¨ B·∫Øt ƒë·∫ßu t·∫°o video v·ªõi FFmpeg...');
    console.log(`üìÇ ƒê∆∞·ªùng d·∫´n xu·∫•t: ${outputPath}`);
    console.log(`üß© S·ªë ph·∫ßn media: ${scriptPartsWithMedia.length}`);
    console.log(`üß© S·ªë ph·∫ßn c√≥ ƒë·ªß media: ${scriptPartsWithMedia.filter(p => p.imagePath && p.audioPath).length}`);
    
    const outputDir = path.dirname(outputPath);
    if (!fs.existsSync(outputDir)) {
      fs.mkdirSync(outputDir, { recursive: true });
    }

    // T·∫°o ƒë∆∞·ªùng d·∫´n cho filter script
    const filterScriptPath = path.join(outputDir, 'filter_script.txt');
    
    // Ki·ªÉm tra xem c√≥ ph·∫ßn n√†o c√≥ ƒë·ªß media kh√¥ng
    // ƒê·∫£m b·∫£o imagePath t·ªìn t·∫°i cho t·∫•t c·∫£ ph·∫ßn c√≥ audioPath
    scriptPartsWithMedia.forEach((part, index) => {
      if (part.audioPath && !part.imagePath) {
        // N·∫øu c√≥ √¢m thanh nh∆∞ng kh√¥ng c√≥ ·∫£nh, s·ª≠ d·ª•ng ·∫£nh m·∫∑c ƒë·ªãnh
        part.imagePath = path.join(__dirname, '../../public/image/image1.png');
        console.log(`‚ö†Ô∏è S·ª≠ d·ª•ng ·∫£nh m·∫∑c ƒë·ªãnh cho ph·∫ßn ${index + 1} do kh√¥ng c√≥ ·∫£nh`);
      }
    });

    const validParts = scriptPartsWithMedia.filter(part => part.imagePath && part.audioPath);
    
    if (validParts.length === 0) {
      console.error('‚ùå Kh√¥ng c√≥ ph·∫ßn n√†o c√≥ ƒë·ªß media (h√¨nh ·∫£nh v√† √¢m thanh)');
      throw new Error('Kh√¥ng c√≥ ƒë·ªß media ƒë·ªÉ t·∫°o video');
    }
    
    console.log(`‚úÖ C√≥ ${validParts.length} ph·∫ßn h·ª£p l·ªá ƒë·ªÉ t·∫°o video`);
    
    // Ghi th√¥ng tin v·ªÅ t·ª´ng ph·∫ßn ƒë·ªÉ debug
    validParts.forEach((part, index) => {
      console.log(`üß© Ph·∫ßn ${index + 1}:`);
      console.log(`   - L·ªùi tho·∫°i: ${part.text.substring(0, 30)}...`);
      console.log(`   - H√¨nh ·∫£nh: ${part.imagePath}`);
      console.log(`   - √Çm thanh: ${part.audioPath}`);
      
      // Ki·ªÉm tra file c√≥ t·ªìn t·∫°i kh√¥ng
      if (!fs.existsSync(part.imagePath)) {
        console.error(`‚ùå File h√¨nh ·∫£nh kh√¥ng t·ªìn t·∫°i: ${part.imagePath}`);
      }
      
      if (!fs.existsSync(part.audioPath)) {
        console.error(`‚ùå File √¢m thanh kh√¥ng t·ªìn t·∫°i: ${part.audioPath}`);
      }
    });

    // ===== PH∆Ø∆†NG PH√ÅP M·ªöI: S·ª¨ D·ª§NG SEGMENT FILE =====
    // T·∫°o file danh s√°ch segment
    const segmentListPath = path.join(outputDir, 'segment_list.txt');
    let segmentsList = '';
    
    // T·∫°o c√°c segment t·∫°m th·ªùi
    const segments = [];
    
    for (let i = 0; i < validParts.length; i++) {
      const part = validParts[i];
      const segmentPath = path.join(outputDir, `segment_${i}.mp4`);
      segments.push(segmentPath);
      
      // L·∫•y th√¥ng tin v·ªÅ th·ªùi l∆∞·ª£ng √¢m thanh
      try {
        console.log(`üîç ƒêang t·∫°o segment cho ph·∫ßn ${i + 1}...`);
        
        // T·∫°o video segment cho m·ªói ph·∫ßn v·ªõi -af volume ƒë·ªÉ ƒë·∫£m b·∫£o √¢m l∆∞·ª£ng nh·∫•t qu√°n
        const segmentCommand = `ffmpeg -y -loop 1 -i "${part.imagePath}" -i "${part.audioPath}" -c:v libx264 -tune stillimage -c:a aac -b:a 192k -af "volume=1.0" -pix_fmt yuv420p -shortest "${segmentPath}"`;
        console.log(`üîç Command: ${segmentCommand}`);
        
        execSync(segmentCommand, { stdio: 'inherit' });
        
        // Th√™m v√†o danh s√°ch segment
        segmentsList += `file '${segmentPath.replace(/\\/g, '/')}'\n`;
        
      } catch (error) {
        console.error(`‚ùå L·ªói khi t·∫°o segment cho ph·∫ßn ${i + 1}:`, error.message);
        throw new Error(`L·ªói khi t·∫°o segment video: ${error.message}`);
      }
    }
    
    // Ghi file danh s√°ch segment
    fs.writeFileSync(segmentListPath, segmentsList);
    
    // Gh√©p c√°c segment th√†nh video ho√†n ch·ªânh
    try {
      console.log('üé¨ Gh√©p c√°c segment th√†nh video cu·ªëi c√πng...');
      
      // S·ª≠ d·ª•ng concat demuxer thay v√¨ filter complex
      const concatCommand = `ffmpeg -y -f concat -safe 0 -i "${segmentListPath}" -c copy "${outputPath}"`;
      console.log(`üé¨ L·ªánh FFmpeg: ${concatCommand}`);
      
      execSync(concatCommand, { stdio: 'inherit' });
      console.log('‚úÖ FFmpeg ƒë√£ t·∫°o video th√†nh c√¥ng');
      
      // D·ªçn d·∫πp c√°c file t·∫°m
      try {
        segments.forEach(segment => {
          if (fs.existsSync(segment)) {
            fs.unlinkSync(segment);
          }
        });
        
        if (fs.existsSync(segmentListPath)) {
          fs.unlinkSync(segmentListPath);
        }
        
        console.log('‚úÖ ƒê√£ x√≥a c√°c file t·∫°m');
      } catch (cleanupError) {
        console.error('‚ö†Ô∏è L·ªói khi x√≥a file t·∫°m:', cleanupError.message);
      }
      
      // Ki·ªÉm tra xem video c√≥ t·ªìn t·∫°i kh√¥ng
      if (fs.existsSync(outputPath)) {
        console.log(`‚úÖ File video ƒë√£ ƒë∆∞·ª£c t·∫°o: ${outputPath}`);
        
        // Ki·ªÉm tra k√≠ch th∆∞·ªõc file
        const stats = fs.statSync(outputPath);
        console.log(`‚úÖ K√≠ch th∆∞·ªõc video: ${(stats.size / (1024 * 1024)).toFixed(2)} MB`);
        
        if (stats.size < 10000) { // Nh·ªè h∆°n 10KB c√≥ th·ªÉ l√† file r·ªóng ho·∫∑c b·ªã l·ªói
          console.error('‚ùå Video c√≥ k√≠ch th∆∞·ªõc qu√° nh·ªè, c√≥ th·ªÉ b·ªã l·ªói');
        }
      } else {
        console.error('‚ùå File video kh√¥ng t·ªìn t·∫°i sau khi x·ª≠ l√Ω');
        throw new Error('Kh√¥ng th·ªÉ t·∫°o video: File kh√¥ng ƒë∆∞·ª£c t·∫°o');
      }
      
      return outputPath;
    } catch (error) {
      console.error('‚ùå L·ªói khi gh√©p video:', error.message);
      console.error('Chi ti·∫øt l·ªói:', error.stack);
      throw new Error(`L·ªói khi gh√©p video: ${error.message}`);
    }
  } catch (error) {
    console.error('‚ùå L·ªói trong qu√° tr√¨nh t·∫°o video:', error);
    throw error;
  }
}

/**
 * API ch√≠nh: T·∫°o video t·ª´ k·ªãch b·∫£n v·ªõi gi·ªçng ƒë·ªçc
 */
const generateAdvancedVideo = async (req, res) => {
  console.log('üöÄ B·∫Øt ƒë·∫ßu t·∫°o video n√¢ng cao...');
  console.log('Body request:', JSON.stringify(req.body).substring(0, 200) + '...');
  
  const { topic, script, voiceId } = req.body;

  if (!topic && !script) {
    console.log('‚ùå L·ªói: Thi·∫øu ch·ªß ƒë·ªÅ ho·∫∑c k·ªãch b·∫£n');
    return res.status(400).json({ success: false, error: 'Vui l√≤ng cung c·∫•p ch·ªß ƒë·ªÅ ho·∫∑c k·ªãch b·∫£n!' });
  }

  try {
    // T·∫°o th∆∞ m·ª•c ƒë·∫ßu ra n·∫øu ch∆∞a t·ªìn t·∫°i
    const outputDir = path.join(__dirname, '../../public/videos');
    const tempDir = path.join(__dirname, '../../public/temp');
    const audioDir = path.join(tempDir, 'audio');
    
    [outputDir, tempDir, audioDir].forEach(dir => {
      if (!fs.existsSync(dir)) {
        console.log(`üìÅ T·∫°o th∆∞ m·ª•c: ${dir}`);
        fs.mkdirSync(dir, { recursive: true });
      }
    });

    // Ki·ªÉm tra FFmpeg
    try {
      console.log('üîç Ki·ªÉm tra FFmpeg...');
      const ffmpegVersion = execSync('ffmpeg -version').toString().split('\n')[0];
      console.log(`‚úÖ FFmpeg: ${ffmpegVersion}`);
    } catch (error) {
      console.error('‚ùå L·ªói FFmpeg:', error.message);
      throw new Error('C·∫ßn c√†i ƒë·∫∑t FFmpeg ƒë·ªÉ t·∫°o video. H√£y c√†i ƒë·∫∑t FFmpeg v√† kh·ªüi ƒë·ªông l·∫°i ·ª©ng d·ª•ng.');
    }

    // T·∫°o k·ªãch b·∫£n n·∫øu ch∆∞a c√≥, v√† chu·∫©n h√≥a k·ªãch b·∫£n n·∫øu c√≥
    let finalScript = script;
    
    if (!script || script.trim() === '') {
      console.log('ü§ñ T·∫°o k·ªãch b·∫£n t·ª´ ch·ªß ƒë·ªÅ:', topic);
      try {
        const generatedScript = await generateScriptByVertexAI(topic);
        finalScript = generatedScript;
        console.log('‚úÖ ƒê√£ t·∫°o k·ªãch b·∫£n t·ª´ AI');
      } catch (error) {
        console.error('‚ùå L·ªói khi t·∫°o k·ªãch b·∫£n t·ª´ AI:', error);
        throw new Error(`Kh√¥ng th·ªÉ t·∫°o k·ªãch b·∫£n t·ª´ ch·ªß ƒë·ªÅ: ${error.message}`);
      }
    } else {
      // Chu·∫©n h√≥a k·ªãch b·∫£n ƒë√£ c√≥
      console.log('üìù Chu·∫©n h√≥a k·ªãch b·∫£n ƒë√£ c√≥...');
      
      // Ki·ªÉm tra n·∫øu k·ªãch b·∫£n kh√¥ng ph·∫£i l√† k·ªãch b·∫£n th·ª±c, m√† l√† danh s√°ch ƒë·ªÅ xu·∫•t
      if (finalScript.includes('H√£y nh·∫•n v√†o 1 ch·ªß ƒë·ªÅ ƒë·ªÉ t·∫°o k·ªãch b·∫£n')) {
        console.error('‚ùå N·ªôi dung kh√¥ng ph·∫£i l√† k·ªãch b·∫£n m√† l√† danh s√°ch ƒë·ªÅ xu·∫•t');
        throw new Error('N·ªôi dung kh√¥ng ph·∫£i l√† k·ªãch b·∫£n. Vui l√≤ng t·∫°o k·ªãch b·∫£n tr∆∞·ªõc khi t·∫°o video.');
      }
    }

    console.log('üìú K·ªãch b·∫£n cu·ªëi c√πng (ƒëo·∫°n ƒë·∫ßu):', finalScript.substring(0, 200) + '...');

    // Ph√¢n t√≠ch k·ªãch b·∫£n
    console.log('üîç Ph√¢n t√≠ch k·ªãch b·∫£n...');
    const scriptParts = extractScriptParts(finalScript);
    console.log(`‚úÖ Ph√¢n t√≠ch ƒë∆∞·ª£c ${scriptParts.length} ph·∫ßn k·ªãch b·∫£n`);
    
    if (scriptParts.length === 0) {
      console.error('‚ùå Kh√¥ng t√¨m th·∫•y ph·∫ßn n√†o trong k·ªãch b·∫£n');
      const errorMessage = 'K·ªãch b·∫£n kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng. H√£y ki·ªÉm tra l·∫°i. ' + 
                          'K·ªãch b·∫£n ph·∫£i c√≥ c√°c ph·∫ßn ƒë∆∞·ª£c ƒë√°nh d·∫•u b·∫±ng "## PH·∫¶N" v√† c√≥ "**L·ªùi tho·∫°i:**" v√† "**H√¨nh ·∫£nh:**".';
      throw new Error(errorMessage);
    }

    // T·∫°o file √¢m thanh cho t·ª´ng ph·∫ßn
    console.log('üîä T·∫°o √¢m thanh cho k·ªãch b·∫£n...');
    const scriptPartsWithAudio = await createAudioForScript(finalScript, audioDir, voiceId);
    console.log(`‚úÖ ƒê√£ t·∫°o ${scriptPartsWithAudio.length} file √¢m thanh`);
    
    if (scriptPartsWithAudio.length === 0) {
      console.error('‚ùå Kh√¥ng t·∫°o ƒë∆∞·ª£c file √¢m thanh n√†o');
      throw new Error('Kh√¥ng th·ªÉ t·∫°o √¢m thanh. H√£y ki·ªÉm tra file credentials Google Cloud.');
    }

    // T·∫£i h√¨nh ·∫£nh cho t·ª´ng ph·∫ßn
    console.log('üñºÔ∏è T·∫£i h√¨nh ·∫£nh cho k·ªãch b·∫£n...');
    const scriptPartsWithMedia = await downloadImagesForScriptParts(scriptPartsWithAudio, tempDir);
    console.log(`‚úÖ ƒê√£ t·∫£i ${scriptPartsWithMedia.filter(p => p.imagePath).length} h√¨nh ·∫£nh`);
    
    if (scriptPartsWithMedia.filter(p => p.imagePath).length === 0) {
      console.error('‚ùå Kh√¥ng t·∫£i ƒë∆∞·ª£c h√¨nh ·∫£nh n√†o');
      throw new Error('Kh√¥ng th·ªÉ t·∫£i h√¨nh ·∫£nh. H√£y ki·ªÉm tra k·∫øt n·ªëi m·∫°ng.');
    }
    
    // T·∫°o t√™n file video
    const videoFileName = `advanced_video_${Date.now()}.mp4`;
    const outputPath = path.join(outputDir, videoFileName);
    
    // T·∫°o video
    console.log('üé¨ B·∫Øt ƒë·∫ßu t·∫°o video...');
    await createVideoWithAudio(scriptPartsWithMedia, outputPath);
    console.log('‚úÖ ƒê√£ t·∫°o video th√†nh c√¥ng:', outputPath);
    
    // Tr·∫£ v·ªÅ k·∫øt qu·∫£
    return res.json({
      success: true,
      videoUrl: `/videos/${videoFileName}`,
      script: finalScript
    });
  } catch (error) {
    console.error('‚ùå L·ªñI NGHI√äM TR·ªåNG:', error);
    console.error('Chi ti·∫øt l·ªói:', error.stack);
    
    return res.status(500).json({
      success: false,
      error: error.message || 'L·ªói kh√¥ng x√°c ƒë·ªãnh khi t·∫°o video',
      stack: error.stack
    });
  }
};

// Danh s√°ch c√°c gi·ªçng ƒë·ªçc ti·∫øng Vi·ªát c√≥ s·∫µn
const getAvailableVoices = async (req, res) => {
  try {
    const voices = Object.entries(VIETNAMESE_VOICES).map(([key, value]) => ({
      id: value,
      name: key,
      gender: key.includes('FEMALE') ? 'N·ªØ' : 'Nam',
      quality: key.includes('NEURAL') ? 'Cao nh·∫•t' : (key.includes('WAVENET') ? 'Cao' : 'Ti√™u chu·∫©n')
    }));
    
    return res.json({ 
      success: true, 
      voices 
    });
  } catch (error) {
    console.error('L·ªói khi l·∫•y danh s√°ch gi·ªçng ƒë·ªçc:', error);
    return res.status(500).json({ 
      success: false, 
      error: error.message || 'L·ªói khi l·∫•y danh s√°ch gi·ªçng ƒë·ªçc' 
    });
  }
};

/**
 * API chu·∫©n b·ªã k·ªãch b·∫£n v√† ph√¢n t√≠ch th√†nh c√°c ph·∫ßn ƒë·ªÉ ch·ªânh s·ª≠a
 */
const prepareVideoScript = async (req, res) => {
  console.log('üöÄ B·∫Øt ƒë·∫ßu chu·∫©n b·ªã k·ªãch b·∫£n...');
  console.log('Body request:', JSON.stringify(req.body).substring(0, 200) + '...');
  
  const { topic, script, voiceId } = req.body;

  if (!topic && !script) {
    console.log('‚ùå L·ªói: Thi·∫øu ch·ªß ƒë·ªÅ ho·∫∑c k·ªãch b·∫£n');
    return res.status(400).json({ success: false, error: 'Vui l√≤ng cung c·∫•p ch·ªß ƒë·ªÅ ho·∫∑c k·ªãch b·∫£n!' });
  }

  try {
    // T·∫°o th∆∞ m·ª•c ƒë·∫ßu ra n·∫øu ch∆∞a t·ªìn t·∫°i
    const tempDir = path.join(__dirname, '../../public/temp');
    const audioDir = path.join(tempDir, 'audio');
    
    [tempDir, audioDir].forEach(dir => {
      if (!fs.existsSync(dir)) {
        console.log(`üìÅ T·∫°o th∆∞ m·ª•c: ${dir}`);
        fs.mkdirSync(dir, { recursive: true });
      }
    });

    // Ki·ªÉm tra FFmpeg
    try {
      console.log('üîç Ki·ªÉm tra FFmpeg...');
      const ffmpegVersion = execSync('ffmpeg -version').toString().split('\n')[0];
      console.log(`‚úÖ FFmpeg: ${ffmpegVersion}`);
    } catch (error) {
      console.error('‚ùå L·ªói FFmpeg:', error.message);
      throw new Error('C·∫ßn c√†i ƒë·∫∑t FFmpeg ƒë·ªÉ t·∫°o video. H√£y c√†i ƒë·∫∑t FFmpeg v√† kh·ªüi ƒë·ªông l·∫°i ·ª©ng d·ª•ng.');
    }

    // T·∫°o k·ªãch b·∫£n n·∫øu ch∆∞a c√≥, v√† chu·∫©n h√≥a k·ªãch b·∫£n n·∫øu c√≥
    let finalScript = script;
    
    if (!script || script.trim() === '') {
      console.log('ü§ñ T·∫°o k·ªãch b·∫£n t·ª´ ch·ªß ƒë·ªÅ:', topic);
      try {
        const generatedScript = await generateScriptByVertexAI(topic);
        finalScript = generatedScript;
        console.log('‚úÖ ƒê√£ t·∫°o k·ªãch b·∫£n t·ª´ AI');
      } catch (error) {
        console.error('‚ùå L·ªói khi t·∫°o k·ªãch b·∫£n t·ª´ AI:', error);
        throw new Error(`Kh√¥ng th·ªÉ t·∫°o k·ªãch b·∫£n t·ª´ ch·ªß ƒë·ªÅ: ${error.message}`);
      }
    } else {
      // Chu·∫©n h√≥a k·ªãch b·∫£n ƒë√£ c√≥
      console.log('üìù Chu·∫©n h√≥a k·ªãch b·∫£n ƒë√£ c√≥...');
      
      // Ki·ªÉm tra n·∫øu k·ªãch b·∫£n kh√¥ng ph·∫£i l√† k·ªãch b·∫£n th·ª±c, m√† l√† danh s√°ch ƒë·ªÅ xu·∫•t
      if (finalScript.includes('H√£y nh·∫•n v√†o 1 ch·ªß ƒë·ªÅ ƒë·ªÉ t·∫°o k·ªãch b·∫£n')) {
        console.error('‚ùå N·ªôi dung kh√¥ng ph·∫£i l√† k·ªãch b·∫£n m√† l√† danh s√°ch ƒë·ªÅ xu·∫•t');
        throw new Error('N·ªôi dung kh√¥ng ph·∫£i l√† k·ªãch b·∫£n. Vui l√≤ng t·∫°o k·ªãch b·∫£n tr∆∞·ªõc khi t·∫°o video.');
      }
    }

    console.log('üìú K·ªãch b·∫£n cu·ªëi c√πng (ƒëo·∫°n ƒë·∫ßu):', finalScript.substring(0, 200) + '...');

    // Ph√¢n t√≠ch k·ªãch b·∫£n
    console.log('üîç Ph√¢n t√≠ch k·ªãch b·∫£n...');
    const scriptParts = extractScriptParts(finalScript);
    console.log(`‚úÖ Ph√¢n t√≠ch ƒë∆∞·ª£c ${scriptParts.length} ph·∫ßn k·ªãch b·∫£n`);
    
    if (scriptParts.length === 0) {
      console.error('‚ùå Kh√¥ng t√¨m th·∫•y ph·∫ßn n√†o trong k·ªãch b·∫£n');
      const errorMessage = 'K·ªãch b·∫£n kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng. H√£y ki·ªÉm tra l·∫°i. ' + 
                          'K·ªãch b·∫£n ph·∫£i c√≥ c√°c ph·∫ßn ƒë∆∞·ª£c ƒë√°nh d·∫•u b·∫±ng "## PH·∫¶N" v√† c√≥ "**L·ªùi tho·∫°i:**" v√† "**H√¨nh ·∫£nh:**".';
      throw new Error(errorMessage);
    }

    // T·∫°o ID phi√™n l√†m vi·ªác ƒë·ªÉ theo d√µi
    const sessionId = Date.now().toString();
    
    // L∆∞u k·ªãch b·∫£n v√† c√°c ph·∫ßn v√†o session ƒë·ªÉ s·ª≠ d·ª•ng sau
    if (!req.session) {
      req.session = {};
    }
    
    req.session.videoPreparation = {
      sessionId,
      script: finalScript,
      scriptParts: scriptParts.map((part, index) => ({
        id: `part_${index}`,
        index: index,
        ...part,
        audioPath: null,
        imagePath: null
      })),
      voiceId
    };

    // Tr·∫£ v·ªÅ th√¥ng tin k·ªãch b·∫£n ƒë√£ ph√¢n t√≠ch
    return res.json({
      success: true,
      sessionId,
      scriptParts: scriptParts.map((part, index) => ({
        id: `part_${index}`,
        index: index,
        ...part
      })),
      voiceId,
      script: finalScript
    });
  } catch (error) {
    console.error('‚ùå L·ªñI:', error);
    
    return res.status(500).json({
      success: false,
      error: error.message || 'L·ªói kh√¥ng x√°c ƒë·ªãnh khi chu·∫©n b·ªã k·ªãch b·∫£n',
      stack: error.stack
    });
  }
};

/**
 * API t·∫°o/t·∫°o l·∫°i h√¨nh ·∫£nh cho m·ªôt ph·∫ßn c·ª• th·ªÉ
 */
const generateImageForPart = async (req, res) => {
  console.log('üñºÔ∏è B·∫Øt ƒë·∫ßu t·∫°o h√¨nh ·∫£nh cho ph·∫ßn...');
  
  const { sessionId, partId, customPrompt } = req.body;
  
  if (!sessionId || !partId) {
    return res.status(400).json({
      success: false,
      error: 'Thi·∫øu th√¥ng tin phi√™n l√†m vi·ªác ho·∫∑c ID ph·∫ßn'
    });
  }
  
  try {
    // Ki·ªÉm tra phi√™n l√†m vi·ªác
    if (!req.session || !req.session.videoPreparation || req.session.videoPreparation.sessionId !== sessionId) {
      throw new Error('Phi√™n l√†m vi·ªác kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n');
    }
    
    // T√¨m ph·∫ßn c·∫ßn t·∫°o h√¨nh ·∫£nh
    const part = req.session.videoPreparation.scriptParts.find(p => p.id === partId);
    
    if (!part) {
      throw new Error(`Kh√¥ng t√¨m th·∫•y ph·∫ßn v·ªõi ID: ${partId}`);
    }
    
    // X√°c ƒë·ªãnh prompt cho h√¨nh ·∫£nh
    let imagePrompt = customPrompt;
    
    // N·∫øu kh√¥ng c√≥ prompt t√πy ch·ªânh, s·ª≠ d·ª•ng m√¥ t·∫£ h√¨nh ·∫£nh ho·∫∑c tr√≠ch xu·∫•t t·ª´ vƒÉn b·∫£n
    if (!imagePrompt) {
      if (part.image && part.image.trim() !== '') {
        const keywords = extractKeywordsFromDescription(part.image);
        imagePrompt = keywords.join(', ');
      } else {
        // Tr√≠ch xu·∫•t t·ª´ kh√≥a t·ª´ vƒÉn b·∫£n
        const textKeywords = part.text
          .split(/\s+/)
          .filter(word => word.length > 4)
          .filter(word => !['nh∆∞', 'nh∆∞ng', 'ho·∫∑c', 'nh·ªØng', 'ƒë∆∞·ª£c', 'trong', 'c√πng'].includes(word.toLowerCase()))
          .slice(0, 3);
        
        imagePrompt = textKeywords.join(', ');
      }
    }
    
    console.log(`üñºÔ∏è T·∫°o h√¨nh ·∫£nh v·ªõi prompt: ${imagePrompt}`);
    
    // T·∫°o th∆∞ m·ª•c t·∫°m n·∫øu ch∆∞a c√≥
    const tempDir = path.join(__dirname, '../../public/temp');
    if (!fs.existsSync(tempDir)) {
      fs.mkdirSync(tempDir, { recursive: true });
    }
    
    // T·∫°o h√¨nh ·∫£nh b·∫±ng API
    const response = await axios.post('http://localhost:3000/api/image/generate', {
      prompt: imagePrompt,
      modelType: 'standard',
      imageCount: 1
    });
    
    if (response.data.success && response.data.images && response.data.images.length > 0) {
      // L∆∞u ·∫£nh v√†o th∆∞ m·ª•c t·∫°m
      const imageFilename = `part_${part.index}_${Date.now()}.jpg`;
      const filePath = path.join(tempDir, imageFilename);
      
      if (response.data.images[0].type === 'base64') {
        fs.writeFileSync(filePath, Buffer.from(response.data.images[0].imageData, 'base64'));
      } else if (response.data.images[0].type === 'url') {
        const imgResponse = await axios.get(response.data.images[0].imageData, { responseType: 'arraybuffer' });
        fs.writeFileSync(filePath, Buffer.from(imgResponse.data));
      }
      
      // C·∫≠p nh·∫≠t ƒë∆∞·ªùng d·∫´n h√¨nh ·∫£nh trong session
      part.imagePath = filePath;
      
      return res.json({
        success: true,
        imagePath: `/temp/${imageFilename}`,
        prompt: imagePrompt
      });
    } else {
      throw new Error('Kh√¥ng nh·∫≠n ƒë∆∞·ª£c h√¨nh ·∫£nh t·ª´ API t·∫°o ·∫£nh');
    }
  } catch (error) {
    console.error('‚ùå L·ªói khi t·∫°o h√¨nh ·∫£nh:', error);
    return res.status(500).json({
      success: false,
      error: error.message || 'L·ªói kh√¥ng x√°c ƒë·ªãnh khi t·∫°o h√¨nh ·∫£nh'
    });
  }
};

/**
 * API t·∫°o/t·∫°o l·∫°i gi·ªçng ƒë·ªçc cho m·ªôt ph·∫ßn c·ª• th·ªÉ
 */
const generateAudioForPart = async (req, res) => {
  console.log('üîä B·∫Øt ƒë·∫ßu t·∫°o gi·ªçng ƒë·ªçc cho ph·∫ßn...');
  
  const { sessionId, partId, voiceId, customText } = req.body;
  
  if (!sessionId || !partId) {
    return res.status(400).json({
      success: false,
      error: 'Thi·∫øu th√¥ng tin phi√™n l√†m vi·ªác ho·∫∑c ID ph·∫ßn'
    });
  }
  
  try {
    // Ki·ªÉm tra phi√™n l√†m vi·ªác
    if (!req.session || !req.session.videoPreparation || req.session.videoPreparation.sessionId !== sessionId) {
      throw new Error('Phi√™n l√†m vi·ªác kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n');
    }
    
    // T√¨m ph·∫ßn c·∫ßn t·∫°o gi·ªçng ƒë·ªçc
    const part = req.session.videoPreparation.scriptParts.find(p => p.id === partId);
    
    if (!part) {
      throw new Error(`Kh√¥ng t√¨m th·∫•y ph·∫ßn v·ªõi ID: ${partId}`);
    }
    
    // X√°c ƒë·ªãnh vƒÉn b·∫£n v√† gi·ªçng ƒë·ªçc
    const text = customText || part.text;
    const selectedVoiceId = voiceId || req.session.videoPreparation.voiceId || VIETNAMESE_VOICES.FEMALE_NEURAL_A;
    
    // T·∫°o th∆∞ m·ª•c l∆∞u tr·ªØ
    const audioDir = path.join(__dirname, '../../public/temp/audio');
    if (!fs.existsSync(audioDir)) {
      fs.mkdirSync(audioDir, { recursive: true });
    }
    
    // ƒê∆∞·ªùng d·∫´n file ƒë·∫ßu ra
    const audioFilename = `part_${part.index}_${Date.now()}.mp3`;
    const outputPath = path.join(audioDir, audioFilename);
    
    // T·∫°o gi·ªçng ƒë·ªçc
    await convertTextToSpeech(text, outputPath, selectedVoiceId);
    
    // C·∫≠p nh·∫≠t ƒë∆∞·ªùng d·∫´n √¢m thanh trong session
    part.audioPath = outputPath;
    
    // N·∫øu vƒÉn b·∫£n ƒë∆∞·ª£c t√πy ch·ªânh, c·∫≠p nh·∫≠t n·ªôi dung text trong part
    if (customText) {
      part.text = customText;
    }
    
    return res.json({
      success: true,
      audioPath: `/temp/audio/${audioFilename}`,
      text: text
    });
  } catch (error) {
    console.error('‚ùå L·ªói khi t·∫°o gi·ªçng ƒë·ªçc:', error);
    return res.status(500).json({
      success: false,
      error: error.message || 'L·ªói kh√¥ng x√°c ƒë·ªãnh khi t·∫°o gi·ªçng ƒë·ªçc'
    });
  }
};

/**
 * API ho√†n thi·ªán video t·ª´ c√°c ph·∫ßn ƒë√£ chu·∫©n b·ªã
 */
const finalizeAdvancedVideo = async (req, res) => {
  console.log('üé¨ B·∫Øt ƒë·∫ßu ho√†n thi·ªán video...');
  
  const { sessionId } = req.body;
  
  if (!sessionId) {
    return res.status(400).json({
      success: false,
      error: 'Thi·∫øu th√¥ng tin phi√™n l√†m vi·ªác'
    });
  }
  
  try {
    // Ki·ªÉm tra phi√™n l√†m vi·ªác
    if (!req.session || !req.session.videoPreparation || req.session.videoPreparation.sessionId !== sessionId) {
      throw new Error('Phi√™n l√†m vi·ªác kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n');
    }
    
    // L·∫•y th√¥ng tin k·ªãch b·∫£n v√† c√°c ph·∫ßn
    const { script, scriptParts } = req.session.videoPreparation;
    
    // Ki·ªÉm tra xem c√≥ ƒë·ªß th√¥ng tin ƒë·ªÉ t·∫°o video kh√¥ng
    const validParts = scriptParts.filter(part => part.imagePath && part.audioPath);
    
    if (validParts.length === 0) {
      throw new Error('Kh√¥ng c√≥ ph·∫ßn n√†o c√≥ ƒë·ªß media (h√¨nh ·∫£nh v√† √¢m thanh)');
    }
    
    // T√™n file video
    const outputDir = path.join(__dirname, '../../public/videos');
    if (!fs.existsSync(outputDir)) {
      fs.mkdirSync(outputDir, { recursive: true });
    }
    
    const videoFileName = `advanced_video_${sessionId}.mp4`;
    const outputPath = path.join(outputDir, videoFileName);
    
    // T·∫°o video t·ª´ c√°c ph·∫ßn
    await createVideoWithAudio(validParts, outputPath);
    
    return res.json({
      success: true,
      videoUrl: `/videos/${videoFileName}`,
      script: script
    });
  } catch (error) {
    console.error('‚ùå L·ªói khi ho√†n thi·ªán video:', error);
    return res.status(500).json({
      success: false,
      error: error.message || 'L·ªói kh√¥ng x√°c ƒë·ªãnh khi t·∫°o video'
    });
  }
};

/**
 * API t·∫£i l√™n h√¨nh ·∫£nh t√πy ch·ªânh cho m·ªôt ph·∫ßn c·ª• th·ªÉ
 * L∆∞u √Ω: H√†m n√†y ƒë∆∞·ª£c thi·∫øt k·∫ø ƒë·ªÉ x·ª≠ l√Ω t·ª´ng request v·ªõi middleware upload.single('image')
 */
const uploadImageForPart = async (req, res) => {
  // req.file ƒë∆∞·ª£c thi·∫øt l·∫≠p b·ªüi multer sau khi t·∫£i l√™n th√†nh c√¥ng
  if (!req.file) {
    return res.status(400).json({ 
      success: false, 
      error: 'Kh√¥ng t√¨m th·∫•y file ·∫£nh trong request' 
    });
  }

  const { sessionId, partId } = req.body;
  
  if (!sessionId || !partId) {
    // X√≥a file ƒë√£ t·∫£i l√™n n·∫øu th√¥ng tin kh√¥ng h·ª£p l·ªá
    if (req.file.path && fs.existsSync(req.file.path)) {
      fs.unlinkSync(req.file.path);
    }
    
    return res.status(400).json({
      success: false,
      error: 'Thi·∫øu th√¥ng tin phi√™n l√†m vi·ªác ho·∫∑c ID ph·∫ßn'
    });
  }
  
  try {
    // Ki·ªÉm tra phi√™n l√†m vi·ªác
    if (!req.session || !req.session.videoPreparation || req.session.videoPreparation.sessionId !== sessionId) {
      throw new Error('Phi√™n l√†m vi·ªác kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n');
    }
    
    // T√¨m ph·∫ßn c·∫ßn c·∫≠p nh·∫≠t h√¨nh ·∫£nh
    const part = req.session.videoPreparation.scriptParts.find(p => p.id === partId);
    
    if (!part) {
      throw new Error(`Kh√¥ng t√¨m th·∫•y ph·∫ßn v·ªõi ID: ${partId}`);
    }
    
    // C·∫≠p nh·∫≠t ƒë∆∞·ªùng d·∫´n h√¨nh ·∫£nh trong session
    part.imagePath = req.file.path;
    
    // Tr·∫£ v·ªÅ ƒë∆∞·ªùng d·∫´n t∆∞∆°ng ƒë·ªëi ƒë·ªÉ hi·ªÉn th·ªã trong frontend
    const relativePath = `/temp/${path.basename(req.file.path)}`;
    
    return res.json({
      success: true,
      imagePath: relativePath,
      filename: path.basename(req.file.path)
    });
  } catch (error) {
    console.error('‚ùå L·ªói khi t·∫£i l√™n h√¨nh ·∫£nh:', error);
    
    // X√≥a file ƒë√£ t·∫£i l√™n n·∫øu x·ª≠ l√Ω th·∫•t b·∫°i
    if (req.file.path && fs.existsSync(req.file.path)) {
      fs.unlinkSync(req.file.path);
    }
    
    return res.status(500).json({
      success: false,
      error: error.message || 'L·ªói kh√¥ng x√°c ƒë·ªãnh khi t·∫£i l√™n h√¨nh ·∫£nh'
    });
  }
};

module.exports = { 
  generateAdvancedVideo,
  getAvailableVoices,
  prepareVideoScript,
  generateImageForPart,
  generateAudioForPart,
  finalizeAdvancedVideo,
  uploadImageForPart,
  upload // Export middleware upload ƒë·ªÉ s·ª≠ d·ª•ng trong router
}; 