const { GoogleGenerativeAI } = require('@google/generative-ai');
const { GoogleAuth } = require('google-auth-library');
const path = require('path');
const fs = require('fs');
require('dotenv').config();

// ƒê∆∞·ªùng d·∫´n ƒë·∫øn file credentials
const credentialsPath = path.join(__dirname, '..', 'gemini.json');

// Ki·ªÉm tra file credentials
if (!fs.existsSync(credentialsPath)) {
  console.error(`‚ùå Kh√¥ng t√¨m th·∫•y file credentials t·∫°i ƒë∆∞·ªùng d·∫´n: ${credentialsPath}`);
} else {
  console.log(`‚úì ƒê√£ t√¨m th·∫•y file credentials t·∫°i: ${credentialsPath}`);
}

// Kh·ªüi t·∫°o Google Generative AI v·ªõi auth t·ª´ service account
let genAI;
try {
  // ƒê·ªçc credentials t·ª´ file
  const credentials = JSON.parse(fs.readFileSync(credentialsPath));
  
  // C·∫•u h√¨nh API key thay v√¨ service account v√¨ Gemini API ch·ªâ h·ªó tr·ª£ API key tr·ª±c ti·∫øp
  // Trong tr∆∞·ªùng h·ª£p n√†y, ta v·∫´n d√πng th∆∞ vi·ªán Generative AI nh∆∞ng s·∫Ω c·∫ßn API key
  
  // Th·ª≠ l·∫•y API key t·ª´ .env n·∫øu c√≥
  const apiKey = process.env.GEMINI_API_KEY;
  if (apiKey) {
    genAI = new GoogleGenerativeAI(apiKey);
    console.log('‚úì Kh·ªüi t·∫°o Gemini v·ªõi API key t·ª´ .env');
  } else {
    // Fallback xu·ªëng m√£ th·ª≠ nghi·ªám (demo)
    console.warn('‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y GEMINI_API_KEY trong .env file');
    console.warn('‚ö†Ô∏è S·ª≠ d·ª•ng service account credentials kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£ tr·ª±c ti·∫øp v·ªõi @google/generative-ai');
    console.warn('‚ö†Ô∏è B·∫°n c·∫ßn t·∫°o API key t·ª´ Google AI Studio v√† th√™m v√†o .env file');
    genAI = new GoogleGenerativeAI("DEMO_KEY"); // S·∫Ω kh√¥ng ho·∫°t ƒë·ªông v·ªõi DEMO_KEY
  }
} catch (error) {
  console.error('‚ùå L·ªói khi kh·ªüi t·∫°o Gemini API:', error.message);
}

// H√†m sinh ch·ªß ƒë·ªÅ b·∫±ng Gemini
exports.generateTopicByGemini = async (keyword) => {
  // ƒê·∫£m b·∫£o keyword l√† chu·ªói v√† kh√¥ng r·ªóng
  if (!keyword || typeof keyword !== 'string' || keyword.trim() === '') {
    console.log('‚ùå T·ª´ kh√≥a kh√¥ng h·ª£p l·ªá ho·∫∑c r·ªóng:', keyword);
    return [
      { title: "Vui l√≤ng nh·∫≠p t·ª´ kh√≥a ƒë·ªÉ sinh ch·ªß ƒë·ªÅ", source: 'Gemini' }
    ];
  }
  
  // ƒê·∫£m b·∫£o keyword l√† chu·ªói s·∫°ch
  const cleanKeyword = keyword.trim();
  console.log('üîç G·ªçi Gemini v·ªõi t·ª´ kh√≥a ƒë√£ l√†m s·∫°ch:', cleanKeyword);
  
  const prompt = `
B·∫°n l√† m·ªôt chuy√™n gia s√°ng t·∫°o n·ªôi dung cho m·∫°ng x√£ h·ªôi.

H√£y g·ª£i √Ω 10 √Ω t∆∞·ªüng ch·ªß ƒë·ªÅ video ng·∫Øn h·∫•p d·∫´n li√™n quan ƒë·∫øn: "${cleanKeyword}".

Y√™u c·∫ßu:
- √ù t∆∞·ªüng ph·∫£i thu h√∫t ng∆∞·ªùi xem
- Ph√π h·ª£p v·ªõi xu h∆∞·ªõng hi·ªán t·∫°i
- Ti√™u ƒë·ªÅ ph·∫£i ng·∫Øn g·ªçn, h·∫•p d·∫´n
- QUAN TR·ªåNG: Ch·ªâ tr·∫£ v·ªÅ danh s√°ch d·∫°ng JSON v·ªõi format sau: 
[
  {"title": "Ti√™u ƒë·ªÅ 1"},
  {"title": "Ti√™u ƒë·ªÅ 2"},
  ... c√°c ti√™u ƒë·ªÅ kh√°c
]
- Kh√¥ng th√™m th√¥ng tin gi·ªõi thi·ªáu hay gi·∫£i th√≠ch
`;

  try {
    console.log('ü§ñ ƒêang g·ªçi Gemini API v·ªõi prompt:', prompt.substring(0, 100) + '...');
    
    try {
      if (!genAI) {
        throw new Error("Google Generative AI ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o");
      }
      
      // L·∫•y model Gemini
      const model = genAI.getGenerativeModel({ model: "gemini-pro-2.5" });
      
      // G·ªçi API
      const result = await model.generateContent(prompt);
      const response = result.response;
      console.log('‚úì ƒê√£ nh·∫≠n ph·∫£n h·ªìi t·ª´ Gemini API');
      
      let responseText = response.text().trim();
      console.log('üìù K·∫øt qu·∫£ th√¥ t·ª´ Gemini:', responseText.substring(0, 100) + '...');
      
      // ƒê·∫£m b·∫£o k·∫øt qu·∫£ l√† m·ªôt m·∫£ng JSON h·ª£p l·ªá
      let topics = [];
      
      try {
        // T√¨m v√† tr√≠ch xu·∫•t ph·∫ßn JSON trong k·∫øt qu·∫£ (n·∫øu c√≥)
        const jsonMatch = responseText.match(/\[\s*\{.*\}\s*\]/s);
        if (jsonMatch) {
          console.log('T√¨m th·∫•y chu·ªói JSON trong k·∫øt qu·∫£');
          responseText = jsonMatch[0];
        }
        
        topics = JSON.parse(responseText);
        console.log('‚úÖ Parse JSON th√†nh c√¥ng');
      } catch (jsonError) {
        console.log('‚ùå Kh√¥ng th·ªÉ parse JSON, chuy·ªÉn sang x·ª≠ l√Ω vƒÉn b·∫£n');
        // N·∫øu kh√¥ng ph·∫£i JSON, c·ªë g·∫Øng ph√¢n t√≠ch t·ª´ vƒÉn b·∫£n
        const lines = responseText.split('\n').filter(line => line.trim() !== '');
        topics = [];
        
        // T√¨m c√°c d√≤ng c√≥ ch·ª©a ti√™u ƒë·ªÅ
        for (const line of lines) {
          // Lo·∫°i b·ªè s·ªë th·ª© t·ª±, d·∫•u g·∫°ch ƒë·∫ßu d√≤ng
          const cleanLine = line.replace(/^(\d+\.|\-|\*)\s*/, '').trim();
          
          // Lo·∫°i b·ªè c√°c k√Ω t·ª± kh√¥ng c·∫ßn thi·∫øt nh∆∞ d·∫•u ngo·∫∑c k√©p, d·∫•u ph·∫©y n·∫øu ƒë√≥ l√† ph·∫ßn c·ªßa JSON
          const titleMatch = cleanLine.match(/"title"\s*:\s*"([^"]+)"/);
          
          if (titleMatch) {
            topics.push({ title: titleMatch[1] });
          } else if (cleanLine && cleanLine.length > 3) {
            topics.push({ title: cleanLine });
          }
        }
      }
      
      // N·∫øu kh√¥ng t√¨m th·∫•y ƒë·ªß ch·ªß ƒë·ªÅ, t·∫°o m·ªôt s·ªë ch·ªß ƒë·ªÅ m·∫´u
      if (!Array.isArray(topics) || topics.length < 3) {
        console.log('‚ö†Ô∏è Kh√¥ng ƒë·ªß ch·ªß ƒë·ªÅ, t·∫°o ch·ªß ƒë·ªÅ m·∫´u');
        topics = [
          { title: `${cleanKeyword}: Nh·ªØng ƒëi·ªÅu b·∫°n ch∆∞a bi·∫øt` },
          { title: `10 b√≠ m·∫≠t v·ªÅ ${cleanKeyword} √≠t ng∆∞·ªùi bi·∫øt ƒë·∫øn` },
          { title: `${cleanKeyword} trending 2024 - Xu h∆∞·ªõng m·ªõi nh·∫•t` },
          { title: `L√†m th·∫ø n√†o ƒë·ªÉ ${cleanKeyword} hi·ªáu qu·∫£ nh·∫•t` },
          { title: `${cleanKeyword} cho ng∆∞·ªùi m·ªõi b·∫Øt ƒë·∫ßu` },
          { title: `${cleanKeyword} - Phi√™n b·∫£n n√¢ng c·∫•p` },
          { title: `S·ª± th·∫≠t v·ªÅ ${cleanKeyword} g√¢y s·ªëc` },
          { title: `${cleanKeyword} trong 60 gi√¢y` },
          { title: `${cleanKeyword} - Tr·∫£i nghi·ªám ƒë·∫ßu ti√™n` },
          { title: `${cleanKeyword} hacks b·∫°n n√™n bi·∫øt` }
        ];
      }
      
      // Map ƒë·ªÉ ƒë·∫£m b·∫£o m·ªói ph·∫ßn t·ª≠ c√≥ ƒë√∫ng ƒë·ªãnh d·∫°ng
      const formattedTopics = topics.map(item => {
        if (typeof item === 'string') {
          return { title: item, source: 'Gemini' };
        }
        return { title: item.title || `√ù t∆∞·ªüng v·ªÅ ${cleanKeyword}`, source: 'Gemini' };
      }).slice(0, 10); // Gi·ªõi h·∫°n 10 ch·ªß ƒë·ªÅ
      
      console.log(`‚úì ƒê√£ x·ª≠ l√Ω th√†nh c√¥ng ${formattedTopics.length} ch·ªß ƒë·ªÅ t·ª´ Gemini`);
      return formattedTopics;
      
    } catch (apiError) {
      console.error("‚ùå L·ªói khi g·ªçi Gemini:", apiError.message);
      
      // T·∫°o ch·ªß ƒë·ªÅ m·∫´u khi API l·ªói
      console.log('‚ö†Ô∏è API l·ªói, t·∫°o ch·ªß ƒë·ªÅ m·∫´u');
      const fallbackTopics = [
        { title: `${cleanKeyword}: Nh·ªØng ƒëi·ªÅu b·∫°n ch∆∞a bi·∫øt`, source: 'Gemini' },
        { title: `10 b√≠ m·∫≠t v·ªÅ ${cleanKeyword} √≠t ng∆∞·ªùi bi·∫øt ƒë·∫øn`, source: 'Gemini' },
        { title: `${cleanKeyword} trending 2024 - Xu h∆∞·ªõng m·ªõi nh·∫•t`, source: 'Gemini' },
        { title: `L√†m th·∫ø n√†o ƒë·ªÉ ${cleanKeyword} hi·ªáu qu·∫£ nh·∫•t`, source: 'Gemini' },
        { title: `${cleanKeyword} cho ng∆∞·ªùi m·ªõi b·∫Øt ƒë·∫ßu`, source: 'Gemini' },
        { title: `${cleanKeyword} - Phi√™n b·∫£n n√¢ng c·∫•p`, source: 'Gemini' },
        { title: `S·ª± th·∫≠t v·ªÅ ${cleanKeyword} g√¢y s·ªëc`, source: 'Gemini' },
        { title: `${cleanKeyword} trong 60 gi√¢y`, source: 'Gemini' },
        { title: `${cleanKeyword} - Tr·∫£i nghi·ªám ƒë·∫ßu ti√™n`, source: 'Gemini' },
        { title: `${cleanKeyword} hacks b·∫°n n√™n bi·∫øt`, source: 'Gemini' }
      ];
      return fallbackTopics;
    }
  } catch (generalError) {
    console.error("‚ùå L·ªói t·ªïng th·ªÉ:", generalError.message);
    
    // T·∫°o ch·ªß ƒë·ªÅ m·∫´u khi c√≥ l·ªói t·ªïng th·ªÉ
    const emergencyTopics = [
      { title: `${cleanKeyword}: Nh·ªØng ƒëi·ªÅu b·∫°n ch∆∞a bi·∫øt`, source: 'Gemini' },
      { title: `10 b√≠ m·∫≠t v·ªÅ ${cleanKeyword} √≠t ng∆∞·ªùi bi·∫øt ƒë·∫øn`, source: 'Gemini' },
      { title: `${cleanKeyword} trending 2024 - Xu h∆∞·ªõng m·ªõi nh·∫•t`, source: 'Gemini' },
      { title: `L√†m th·∫ø n√†o ƒë·ªÉ ${cleanKeyword} hi·ªáu qu·∫£ nh·∫•t`, source: 'Gemini' },
      { title: `${cleanKeyword} cho ng∆∞·ªùi m·ªõi b·∫Øt ƒë·∫ßu`, source: 'Gemini' },
      { title: `${cleanKeyword} - Phi√™n b·∫£n n√¢ng c·∫•p`, source: 'Gemini' },
      { title: `S·ª± th·∫≠t v·ªÅ ${cleanKeyword} g√¢y s·ªëc`, source: 'Gemini' },
      { title: `${cleanKeyword} trong 60 gi√¢y`, source: 'Gemini' },
      { title: `${cleanKeyword} - Tr·∫£i nghi·ªám ƒë·∫ßu ti√™n`, source: 'Gemini' },
      { title: `${cleanKeyword} hacks b·∫°n n√™n bi·∫øt`, source: 'Gemini' }
    ];
    return emergencyTopics;
  }
}; 