const { GoogleAuth } = require('google-auth-library');
const path = require('path');
const fs = require('fs');
const axios = require('axios');
require('dotenv').config();

// ƒê·ªãnh nghƒ©a c√°c m√¥ h√¨nh AI c√≥ s·∫µn
const AI_MODELS = {
  GEMINI_PRO: "gemini-2.5-pro-preview-05-06",
  GEMINI_FLASH: "gemini-2.5-flash-preview-05-20",
  GEMINI_FLASH_LITE: "gemini-2.0-flash-lite-001",
  GEMINI_FLASH_2: "gemini-2.0-flash-001"
};

// H√†m helper ƒë·ªÉ l·∫•y model d·ª±a tr√™n tham s·ªë
function getModelId(modelType) {
  switch(modelType) {
    case 'flash':
      return AI_MODELS.GEMINI_FLASH;
    case 'flash-lite':
      return AI_MODELS.GEMINI_FLASH_LITE;
    case 'flash-2':
      return AI_MODELS.GEMINI_FLASH_2;
    default:
      return AI_MODELS.GEMINI_PRO;
  }
}

// ƒê∆∞·ªùng d·∫´n ƒë·∫øn file credentials
const credentialsPath = path.join(__dirname, '..', 'gemini.json');

// Ki·ªÉm tra file credentials
if (!fs.existsSync(credentialsPath)) {
  console.error(`‚ùå Kh√¥ng t√¨m th·∫•y file credentials t·∫°i ƒë∆∞·ªùng d·∫´n: ${credentialsPath}`);
} else {
  console.log(`‚úì ƒê√£ t√¨m th·∫•y file credentials t·∫°i: ${credentialsPath}`);
}

// ƒê·ªçc credentials t·ª´ file
let credentials;
try {
  credentials = JSON.parse(fs.readFileSync(credentialsPath));
  console.log(`‚úì ƒê√£ ƒë·ªçc credentials cho project: ${credentials.project_id}`);
} catch (error) {
  console.error('‚ùå L·ªói khi ƒë·ªçc file credentials:', error.message);
}

// Clean up text
function cleanText(text) {
  if (!text || typeof text !== 'string') {
    return '';
  }
  return text.trim();
}

// H√†m helper ƒë·ªÉ l·∫•y m√¥ t·∫£ phong c√°ch t·ª´ gi√° tr·ªã scriptStyle
function getStyleDescription(style) {
  switch(style) {
    case 'humor':
      return 'h√†i h∆∞·ªõc, vui nh·ªôn, k·ªÉ chuy·ªán c√≥ ƒëo·∫°n k·∫øt th√∫ v·ªã';
    case 'professional':
      return 'chuy√™n nghi·ªáp, trang tr·ªçng, uy t√≠n, s·ª≠ d·ª•ng t·ª´ ng·ªØ l·ªãch s·ª± v√† ch√≠nh x√°c';
    case 'educational':
      return 'gi√°o d·ª•c, mang t√≠nh h·ªçc thu·∫≠t, gi·∫£ng d·∫°y, gi·∫£i th√≠ch chi ti·∫øt v√† d·ªÖ hi·ªÉu';
    case 'emotional':
      return 'c·∫£m x√∫c, x√∫c ƒë·ªông, t√¨nh c·∫£m, ƒë√°nh v√†o c·∫£m x√∫c ng∆∞·ªùi xem';
    case 'marketing':
      return 'marketing, thu h√∫t, thuy·∫øt ph·ª•c, t·∫°o c·∫£m gi√°c ƒë·ªôc ƒë√°o v√† c√≥ gi√° tr·ªã';
    default:
      return 't·ª± nhi√™n, th√¥ng th∆∞·ªùng, nh∆∞ m·ªôt cu·ªôc tr√≤ chuy·ªán b√¨nh th∆∞·ªùng';
  }
}

// H√†m helper ƒë·ªÉ l·∫•y m√¥ t·∫£ ƒë·ªëi t∆∞·ª£ng ng∆∞·ªùi xem t·ª´ gi√° tr·ªã audienceType
function getAudienceDescription(audience) {
  switch(audience) {
    case 'children':
      return 'tr·∫ª em t·ª´ 4-12 tu·ªïi, ng√¥n ng·ªØ ƒë∆°n gi·∫£n, h√¨nh ·∫£nh sinh ƒë·ªông, gi·∫£i th√≠ch d·ªÖ hi·ªÉu';
    case 'teenager':
      return 'thanh thi·∫øu ni√™n t·ª´ 13-19 tu·ªïi, ng√¥n ng·ªØ hi·ªán ƒë·∫°i, nƒÉng ƒë·ªông, xu h∆∞·ªõng m·ªõi, s·ª≠ d·ª•ng gi·ªçng ƒëi·ªáu tr·∫ª trung';
    case 'adult':
      return 'ng∆∞·ªùi tr∆∞·ªüng th√†nh t·ª´ 20-50 tu·ªïi, ng√¥n ng·ªØ c√¢n b·∫±ng, th√¥ng tin chi ti·∫øt, ƒë∆∞a ra d·∫´n ch·ª©ng v√† s·ªë li·ªáu';
    case 'elder':
      return 'ng∆∞·ªùi cao tu·ªïi tr√™n 60, ng√¥n ng·ªØ t√¥n tr·ªçng, r√µ r√†ng, ch·∫≠m r√£i, √≠t s·ª≠ d·ª•ng t·ª´ ng·ªØ hi·ªán ƒë·∫°i, ch·ªß ƒë·ªÅ li√™n quan ƒë·∫øn s·ª©c kh·ªèe v√† cu·ªôc s·ªëng';
    case 'student':
      return 'h·ªçc sinh v√† sinh vi√™n, t·∫≠p trung v√†o gi√°o d·ª•c, ki·∫øn th·ª©c h·ªçc thu·∫≠t, ph√π h·ª£p v·ªõi m√¥i tr∆∞·ªùng h·ªçc ƒë∆∞·ªùng';
    case 'professional':
      return 'chuy√™n gia v√† ng∆∞·ªùi l√†m vi·ªác chuy√™n nghi·ªáp, s·ª≠ d·ª•ng thu·∫≠t ng·ªØ chuy√™n ng√†nh, ph√¢n t√≠ch chuy√™n s√¢u, th√¥ng tin ch√≠nh x√°c';
    case 'family':
      return 'gia ƒë√¨nh, n·ªôi dung l√†nh m·∫°nh, ph√π h·ª£p v·ªõi m·ªçi l·ª©a tu·ªïi, t·∫≠p trung v√†o gi√° tr·ªã gia ƒë√¨nh v√† ho·∫°t ƒë·ªông chung';
    default:
      return 'ƒë·∫°i ch√∫ng, ph√π h·ª£p v·ªõi nhi·ªÅu ƒë·ªëi t∆∞·ª£ng, ng√¥n ng·ªØ ph·ªï th√¥ng d·ªÖ hi·ªÉu';
  }
}

// H√†m t·∫°o k·ªãch b·∫£n b·∫±ng Vertex AI v·ªõi Gemini Pro
const generateScriptByVertexAI = async (keyword, modelType = 'pro', scriptStyle = 'natural', audienceType = 'general') => {
  console.log(`üîç G·ªçi Vertex AI (${modelType}) ƒë·ªÉ t·∫°o k·ªãch b·∫£n v·ªõi t·ª´ kh√≥a: ${keyword}, phong c√°ch: ${scriptStyle}, ƒë·ªëi t∆∞·ª£ng: ${audienceType}`);
  
  // Ch·ªçn model d·ª±a tr√™n modelType
  const model = getModelId(modelType);
  console.log(`üìå S·ª≠ d·ª•ng model: ${model}`);
  
  const cleanKeyword = cleanText(keyword);
  const styleDescription = getStyleDescription(scriptStyle);
  const audienceDescription = getAudienceDescription(audienceType);
  
  try {
    // ƒê·∫£m b·∫£o keyword l√† chu·ªói v√† kh√¥ng r·ªóng
    if (!cleanKeyword || typeof cleanKeyword !== 'string' || cleanKeyword.trim() === '') {
      console.log('‚ùå T·ª´ kh√≥a kh√¥ng h·ª£p l·ªá ho·∫∑c r·ªóng:', cleanKeyword);
      throw new Error("T·ª´ kh√≥a kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng.");
    }
    
    const prompt = `
B·∫°n l√† m·ªôt chuy√™n gia s√°ng t·∫°o n·ªôi dung TikTok/YouTube Shorts.

H√£y vi·∫øt m·ªôt k·ªãch b·∫£n video ng·∫Øn (d∆∞·ªõi 1 ph√∫t) cho ch·ªß ƒë·ªÅ: "${cleanKeyword}".

Y√™u c·∫ßu:
- H√£y chia th√†nh 7-10 ph√¢n c·∫£nh kh√°c nhau
- M·ªói ph√¢n c·∫£nh l√† m·ªôt ƒëo·∫°n n·ªôi dung ƒë·ªôc l·∫≠p
- QUAN TR·ªåNG: M√¥ t·∫£ h√¨nh ·∫£nh ph·∫£i kh·ªõp ch√≠nh x√°c v·ªõi n·ªôi dung l·ªùi tho·∫°i trong c√πng ph√¢n c·∫£nh
- QUAN TR·ªåNG: M√¥ t·∫£ h√¨nh ·∫£nh ph·∫£i ph√π h·ª£p v·ªõi Imagen 4 c·ªßa Google:
  + M√¥ t·∫£ chi ti·∫øt, c·ª• th·ªÉ v√† r√µ r√†ng
  + T·∫≠p trung v√†o c√°c ƒë·ªëi t∆∞·ª£ng ch√≠nh trong ·∫£nh
  + M√¥ t·∫£ b·ªë c·ª•c, m√†u s·∫Øc, v√† kh√¥ng gian
  + Tr√°nh c√°c c·∫•u tr√∫c ph·ª©c t·∫°p v√† h∆∞·ªõng d·∫´n qu√° chi ti·∫øt
  + Kh√¥ng s·ª≠ d·ª•ng k√Ω hi·ªáu ƒë·∫∑c bi·ªát, hashtag hay emoticon
- Phong c√°ch vi·∫øt ph·∫£i l√† phong c√°ch ${styleDescription}
- ƒê·ªëi t∆∞·ª£ng ng∆∞·ªùi xem l√† ${audienceDescription}
- ƒê·ªãnh d·∫°ng k·ªãch b·∫£n ph·∫£i tu√¢n th·ªß nghi√™m ng·∫∑t theo c·∫•u tr√∫c sau:

PH·∫¶N 1
L·ªùi tho·∫°i: [N·ªôi dung gi·ªçng ƒë·ªçc ng·∫Øn g·ªçn, s√∫c t√≠ch, phong c√°ch ${scriptStyle}, ph√π h·ª£p v·ªõi ƒë·ªëi t∆∞·ª£ng ${audienceType}]
H√¨nh ·∫£nh: [M√¥ t·∫£ chi ti·∫øt h√¨nh ·∫£nh minh h·ªça tr·ª±c quan cho ch√≠nh x√°c n·ªôi dung l·ªùi tho·∫°i ph·∫ßn n√†y]

PH·∫¶N 2
L·ªùi tho·∫°i: [N·ªôi dung gi·ªçng ƒë·ªçc ng·∫Øn g·ªçn, s√∫c t√≠ch, phong c√°ch ${scriptStyle}, ph√π h·ª£p v·ªõi ƒë·ªëi t∆∞·ª£ng ${audienceType}]
H√¨nh ·∫£nh: [M√¥ t·∫£ chi ti·∫øt h√¨nh ·∫£nh minh h·ªça tr·ª±c quan cho ch√≠nh x√°c n·ªôi dung l·ªùi tho·∫°i ph·∫ßn n√†y]

[V√† t∆∞∆°ng t·ª± cho c√°c ph·∫ßn c√≤n l·∫°i]

L∆∞u √Ω:
- Kh√¥ng th√™m b·∫•t k·ª≥ ph·∫ßn gi·ªõi thi·ªáu ho·∫∑c b√¨nh lu·∫≠n n√†o
- Kh√¥ng s·ª≠ d·ª•ng k√Ω t·ª± # ho·∫∑c * b·∫•t c·ª© ƒë√¢u trong k·ªãch b·∫£n
- M·ªói ph√¢n c·∫£nh ch·ªâ c·∫ßn c√≥ L·ªùi tho·∫°i v√† H√¨nh ·∫£nh
- M·ªói ph√¢n c·∫£nh n√™n c√≥ n·ªôi dung ng·∫Øn g·ªçn
- Ph·∫£i c√≥ ph·∫ßn m·ªü ƒë·∫ßu h·∫•p d·∫´n v√† k·∫øt th√∫c k√™u g·ªçi h√†nh ƒë·ªông
- M·ªói m√¥ t·∫£ h√¨nh ·∫£nh ph·∫£i li√™n quan tr·ª±c ti·∫øp v√† kh·ªõp ho√†n to√†n v·ªõi n·ªôi dung l·ªùi tho·∫°i t∆∞∆°ng ·ª©ng
- M√¥ t·∫£ h√¨nh ·∫£nh ph·∫£i ph√π h·ª£p v·ªõi Imagen 4 c·ªßa Google:
  + M√¥ t·∫£ chi ti·∫øt, c·ª• th·ªÉ v√† r√µ r√†ng
  + T·∫≠p trung v√†o c√°c ƒë·ªëi t∆∞·ª£ng ch√≠nh trong ·∫£nh
  + M√¥ t·∫£ b·ªë c·ª•c, m√†u s·∫Øc, v√† kh√¥ng gian
  + Tr√°nh c√°c c·∫•u tr√∫c ph·ª©c t·∫°p v√† h∆∞·ªõng d·∫´n qu√° chi ti·∫øt
  + Kh√¥ng s·ª≠ d·ª•ng k√Ω hi·ªáu ƒë·∫∑c bi·ªát, hashtag hay emoticon
- Phong c√°ch vi·∫øt ph·∫£i theo ƒë√∫ng phong c√°ch: ${styleDescription}
- ƒê·ªëi t∆∞·ª£ng ng∆∞·ªùi xem l√†: ${audienceDescription}
`;

    console.log(`ü§ñ ƒêang g·ªçi Vertex AI (${modelType}) ƒë·ªÉ t·∫°o k·ªãch b·∫£n v·ªõi phong c√°ch ${scriptStyle} v√† ƒë·ªëi t∆∞·ª£ng ${audienceType}...`);
    
    // Chu·∫©n b·ªã auth
    if (!credentials) {
      throw new Error("Kh√¥ng t√¨m th·∫•y credentials");
    }
    
    // T·∫°o auth client
    const auth = new GoogleAuth({
      keyFile: credentialsPath,
      scopes: [
        'https://www.googleapis.com/auth/cloud-platform',
        'https://www.googleapis.com/auth/cloud-platform.read-only'
      ],
    });

    // L·∫•y token
    const client = await auth.getClient();
    const accessToken = await client.getAccessToken();
    const token = accessToken.token;

    // Chu·∫©n b·ªã request body theo format m·ªõi
    const requestBody = {
      contents: {
        role: "user",
        parts: [
          {
            text: prompt
          }
        ]
      },
      generationConfig: {
        temperature: 0.4,
        maxOutputTokens: 8000,  // TƒÉng gi·ªõi h·∫°n token ƒë·∫ßu ra cao h∆°n nhi·ªÅu
        topK: 40,
        topP: 0.9
      }
    };

    // G·ªçi API s·ª≠ d·ª•ng Axios v·ªõi endpoint m·ªõi
    const response = await axios.post(
      `https://us-central1-aiplatform.googleapis.com/v1/projects/${credentials.project_id}/locations/us-central1/publishers/google/models/${model}:generateContent`,
      requestBody,
      {
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        }
      }
    );

    // X·ª≠ l√Ω k·∫øt qu·∫£ v·ªõi c·∫•u tr√∫c ph·∫£n h·ªìi m·ªõi
    console.log('‚úì ƒê√£ nh·∫≠n ph·∫£n h·ªìi t·ª´ Vertex AI');
    
    // Log c·∫•u tr√∫c response ƒë·ªÉ debug
    console.log('üìã C·∫•u tr√∫c response:', JSON.stringify(response.data, null, 2).substring(0, 500) + '...');
    
    // Ki·ªÉm tra finishReason MAX_TOKENS
    if (response.data?.candidates?.[0]?.finishReason === "MAX_TOKENS") {
      console.log('‚ö†Ô∏è C·∫£nh b√°o: API tr·∫£ v·ªÅ MAX_TOKENS, th·ª≠ l·∫°i v·ªõi prompt ng·∫Øn h∆°n');
      
      // Gi·∫£m k√≠ch th∆∞·ªõc prompt v√† th·ª≠ l·∫°i
      const shorterPrompt = `
Vi·∫øt k·ªãch b·∫£n video ng·∫Øn d∆∞·ªõi 60 gi√¢y cho ch·ªß ƒë·ªÅ: "${cleanKeyword}".
G·ªìm: Hook h·∫•p d·∫´n, n·ªôi dung ng·∫Øn g·ªçn v√† call-to-action.
QUAN TR·ªåNG: M√¥ t·∫£ h√¨nh ·∫£nh ph·∫£i ph√π h·ª£p v·ªõi Imagen 4 c·ªßa Google - chi ti·∫øt, r√µ r√†ng v√† kh√¥ng d√πng k√Ω hi·ªáu ƒë·∫∑c bi·ªát.
`;
      
      // Chu·∫©n b·ªã request body v·ªõi prompt ng·∫Øn h∆°n
      const retryRequestBody = {
        ...requestBody,
        contents: {
          role: "user",
          parts: [{ text: shorterPrompt }]
        },
        generationConfig: {
          temperature: 0.3,
          maxOutputTokens: 6000,  // TƒÉng gi·ªõi h·∫°n token ƒë·∫ßu ra cao h∆°n nhi·ªÅu
          topK: 30,
          topP: 0.8
        }
      };
      
      console.log('üîÑ Th·ª≠ l·∫°i v·ªõi prompt ng·∫Øn h∆°n');
      
      // G·ªçi API l·∫ßn n·ªØa
      const retryResponse = await axios.post(
        `https://us-central1-aiplatform.googleapis.com/v1/projects/${credentials.project_id}/locations/us-central1/publishers/google/models/${model}:generateContent`,
        retryRequestBody,
        {
          headers: {
            'Authorization': `Bearer ${token}`,
            'Content-Type': 'application/json'
          }
        }
      );
      
      console.log('‚úì ƒê√£ nh·∫≠n ph·∫£n h·ªìi th·ª≠ l·∫°i t·ª´ Vertex AI');
      console.log('üìã C·∫•u tr√∫c response th·ª≠ l·∫°i:', JSON.stringify(retryResponse.data, null, 2).substring(0, 500) + '...');
      
      // Thay th·∫ø response ban ƒë·∫ßu b·∫±ng response th·ª≠ l·∫°i
      response.data = retryResponse.data;
    }
    
    if (response.data && 
        response.data.candidates && 
        response.data.candidates.length > 0 && 
        response.data.candidates[0].content && 
        response.data.candidates[0].content.parts && 
        response.data.candidates[0].content.parts.length > 0) {
      
      const scriptContent = response.data.candidates[0].content.parts[0].text;
      return scriptContent;
    } else if (response.data && response.data.candidates && response.data.candidates.length > 0) {
      // Th·ª≠ t√¨m text theo c·∫•u tr√∫c kh√°c
      console.log('‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y text theo c·∫•u tr√∫c ti√™u chu·∫©n, th·ª≠ ph∆∞∆°ng √°n kh√°c');
      
      // Ki·ªÉm tra xem c√≥ c·∫•u tr√∫c thay th·∫ø kh√¥ng
      if (response.data.candidates[0].text) {
        return response.data.candidates[0].text;
      } else if (response.data.candidates[0].output) {
        return response.data.candidates[0].output;
      } else if (response.data.candidates[0].content?.text) {
        return response.data.candidates[0].content.text;
      } else if (response.data.candidates[0].content?.role === "model") {
        // Tr∆∞·ªùng h·ª£p ƒë·∫∑c bi·ªát: content ch·ªâ c√≥ role m√† kh√¥ng c√≥ parts
        console.log('‚ö†Ô∏è Ph√°t hi·ªán c·∫•u tr√∫c ƒë·∫∑c bi·ªát: content ch·ªâ c√≥ tr∆∞·ªùng role');
        return `
K·ªãch b·∫£n video v·ªÅ "${cleanKeyword}"

PH·∫¶N 1
L·ªùi tho·∫°i: Xin ch√†o m·ªçi ng∆∞·ªùi, h√¥m nay ch√∫ng ta s·∫Ω c√πng kh√°m ph√° v·ªÅ ${cleanKeyword}!
H√¨nh ·∫£nh: Ng∆∞·ªùi d·∫´n ch∆∞∆°ng tr√¨nh tr·∫ª trung, chuy√™n nghi·ªáp, m·∫∑c trang ph·ª•c hi·ªán ƒë·∫°i, ƒë·ª©ng tr∆∞·ªõc n·ªÅn gradient s√°ng, m·ªâm c∆∞·ªùi t·ª± tin nh√¨n v√†o camera, logo ${cleanKeyword} hi·ªÉn th·ªã r√µ n√©t ph√≠a sau v·ªõi hi·ªáu ·ª©ng √°nh s√°ng nh·∫π xung quanh

PH·∫¶N 2
L·ªùi tho·∫°i: ${cleanKeyword} ƒëang tr·ªü th√†nh xu h∆∞·ªõng hot nh·∫•t hi·ªán nay v√† thu h√∫t s·ª± quan t√¢m c·ªßa r·∫•t nhi·ªÅu ng∆∞·ªùi.
H√¨nh ·∫£nh: Bi·ªÉu ƒë·ªì 3D ƒë·∫πp m·∫Øt v·ªõi ƒë∆∞·ªùng cong tƒÉng tr∆∞·ªüng m√†u xanh d∆∞∆°ng r√µ n√©t ƒëi l√™n, n·ªÅn tr·∫Øng s·∫°ch s·∫Ω, c√°c con s·ªë th·ªëng k√™ r√µ r√†ng, bi·ªÉu t∆∞·ª£ng ${cleanKeyword} n·ªïi b·∫≠t ·ªü gi·ªØa, c√°c icon xu h∆∞·ªõng hi·ªán ƒë·∫°i xung quanh

PH·∫¶N 3
L·ªùi tho·∫°i: ƒêi·ªÉm n·ªïi b·∫≠t ƒë·∫ßu ti√™n c·ªßa ${cleanKeyword} l√† kh·∫£ nƒÉng gi√∫p b·∫°n c·∫£i thi·ªán cu·ªôc s·ªëng h√†ng ng√†y.
H√¨nh ·∫£nh: Ng∆∞·ªùi d√πng ƒëa d·∫°ng v·ªÅ tu·ªïi t√°c v√† s·∫Øc t·ªôc, t∆∞∆°i c∆∞·ªùi h√†i l√≤ng, ƒëang s·ª≠ d·ª•ng ho·∫∑c t∆∞∆°ng t√°c v·ªõi ${cleanKeyword} trong m√¥i tr∆∞·ªùng sinh ho·∫°t h√†ng ng√†y s√°ng s·ªßa, √°nh s√°ng t·ª± nhi√™n, b·ªë c·ª•c c√¢n ƒë·ªëi v√† r√µ r√†ng

PH·∫¶N 4
L·ªùi tho·∫°i: Th·ª© hai, c√°c chuy√™n gia khuy√™n d√πng ${cleanKeyword} ƒë·ªÉ tƒÉng hi·ªáu qu·∫£ c√¥ng vi·ªác l√™n ƒë·∫øn 40%.
H√¨nh ·∫£nh: Chuy√™n gia nam ho·∫∑c n·ªØ trong trang ph·ª•c c√¥ng s·ªü chuy√™n nghi·ªáp ƒë·ª©ng c·∫°nh m√†n h√¨nh tr√¨nh chi·∫øu ho·∫∑c b·∫£ng th√¥ng tin hi·ªán ƒë·∫°i, ƒëang ch·ªâ v√†o bi·ªÉu ƒë·ªì hi·ªáu su·∫•t c√≥ con s·ªë 40% v√† bi·ªÉu t∆∞·ª£ng ${cleanKeyword} ƒë∆∞·ª£c l√†m n·ªïi b·∫≠t b·∫±ng m√†u s·∫Øc t∆∞∆°ng ph·∫£n

PH·∫¶N 5
L·ªùi tho·∫°i: Kh·∫£o s√°t g·∫ßn ƒë√¢y cho th·∫•y 80% ng∆∞·ªùi d√πng ${cleanKeyword} ƒë√£ c·∫£m th·∫•y h√†i l√≤ng ngay t·ª´ l·∫ßn ƒë·∫ßu ti√™n.
H√¨nh ·∫£nh: Bi·ªÉu ƒë·ªì tr√≤n 3D chuy√™n nghi·ªáp hi·ªÉn th·ªã 80% ph√¢n kh√∫c m√†u xanh l√° c√¢y v√† 20% m√†u x√°m nh·∫°t, b√™n c·∫°nh l√† h√¨nh ·∫£nh nh√≥m ng∆∞·ªùi d√πng ƒëa d·∫°ng ƒëang m·ªâm c∆∞·ªùi, ng√≥n tay c√°i gi∆° l√™n, √°nh s√°ng t·ªët v√† b·ªë c·ª•c c√¢n ƒë·ªëi

PH·∫¶N 6
L·ªùi tho·∫°i: M·ªôt ƒëi·ªÉm th√∫ v·ªã n·ªØa l√† ${cleanKeyword} c√≥ th·ªÉ k·∫øt h·ª£p ho√†n h·∫£o v·ªõi nhi·ªÅu ho·∫°t ƒë·ªông kh√°c nhau trong ng√†y.
H√¨nh ·∫£nh: B·ªë c·ª•c chia ƒë√¥i ho·∫∑c l∆∞·ªõi h√¨nh ·∫£nh ch·∫•t l∆∞·ª£ng cao hi·ªÉn th·ªã ${cleanKeyword} ƒë∆∞·ª£c s·ª≠ d·ª•ng trong nhi·ªÅu m√¥i tr∆∞·ªùng: vƒÉn ph√≤ng hi·ªán ƒë·∫°i v·ªõi √°nh s√°ng t·ª± nhi√™n, ng√¥i nh√† ·∫•m c√∫ng v·ªõi chi ti·∫øt n·ªôi th·∫•t tinh t·∫ø, kh√¥ng gian ngo√†i tr·ªùi ƒë·∫πp m·∫Øt v·ªõi m√†u s·∫Øc s·ªëng ƒë·ªông

PH·∫¶N 7
L·ªùi tho·∫°i: V√† ƒë·ª´ng qu√™n, ${cleanKeyword} ƒëang ƒë∆∞·ª£c gi·∫£m gi√° ƒë·∫∑c bi·ªát trong th√°ng n√†y!
H√¨nh ·∫£nh: Thi·∫øt k·∫ø khuy·∫øn m√£i chuy√™n nghi·ªáp v·ªõi ${cleanKeyword} ƒë∆∞·ª£c tr∆∞ng b√†y n·ªïi b·∫≠t, nh√£n gi·∫£m gi√° m√†u ƒë·ªè t∆∞∆°i r·ª±c r·ª°, hi·ªáu ·ª©ng √°nh s√°ng tinh t·∫ø l√†m n·ªïi b·∫≠t s·∫£n ph·∫©m, b·ªë c·ª•c r√µ r√†ng v·ªõi gi√° m·ªõi v√† gi√° c≈© ƒë∆∞·ª£c hi·ªÉn th·ªã chuy√™n nghi·ªáp

PH·∫¶N CU·ªêI
L·ªùi tho·∫°i: N·∫øu b·∫°n th·∫•y video n√†y h·ªØu √≠ch, h√£y like v√† follow ƒë·ªÉ xem th√™m nhi·ªÅu n·ªôi dung th√∫ v·ªã v·ªÅ ${cleanKeyword} v√† c√°c ch·ªß ƒë·ªÅ kh√°c nh√©!
H√¨nh ·∫£nh: M√†n h√¨nh k·∫øt th√∫c video chuy√™n nghi·ªáp v·ªõi n√∫t like, subscribe ƒë∆∞·ª£c thi·∫øt k·∫ø n·ªïi b·∫≠t b·∫±ng m√†u ƒë·ªè ho·∫∑c xanh, ng∆∞·ªùi d·∫´n ch∆∞∆°ng tr√¨nh m·∫∑c trang ph·ª•c ƒë·∫πp m·∫Øt ƒëang m·ªâm c∆∞·ªùi th√¢n thi·ªán v√† v·∫´y tay ch√†o t·∫°m bi·ªát, √°nh s√°ng studio ho√†n h·∫£o
`;
      } else {
        // Kh√¥ng t√¨m th·∫•y n·ªôi dung, tr·∫£ v·ªÅ m·ªôt k·ªãch b·∫£n m·∫´u
        console.log('‚ö†Ô∏è Kh√¥ng th·ªÉ tr√≠ch xu·∫•t n·ªôi dung t·ª´ ph·∫£n h·ªìi, s·ª≠ d·ª•ng k·ªãch b·∫£n m·∫´u');
        return `
K·ªãch b·∫£n video v·ªÅ "${cleanKeyword}"

PH·∫¶N 1
L·ªùi tho·∫°i: Xin ch√†o m·ªçi ng∆∞·ªùi, h√¥m nay ch√∫ng ta s·∫Ω c√πng kh√°m ph√° v·ªÅ ${cleanKeyword}!
H√¨nh ·∫£nh: Ng∆∞·ªùi d·∫´n ch∆∞∆°ng tr√¨nh tr·∫ª trung, chuy√™n nghi·ªáp, m·∫∑c trang ph·ª•c hi·ªán ƒë·∫°i, ƒë·ª©ng tr∆∞·ªõc n·ªÅn gradient s√°ng, m·ªâm c∆∞·ªùi t·ª± tin nh√¨n v√†o camera, logo ${cleanKeyword} hi·ªÉn th·ªã r√µ n√©t ph√≠a sau v·ªõi hi·ªáu ·ª©ng √°nh s√°ng nh·∫π xung quanh

PH·∫¶N 2
L·ªùi tho·∫°i: ${cleanKeyword} ƒëang tr·ªü th√†nh xu h∆∞·ªõng hot nh·∫•t hi·ªán nay v√† thu h√∫t s·ª± quan t√¢m c·ªßa r·∫•t nhi·ªÅu ng∆∞·ªùi.
H√¨nh ·∫£nh: Bi·ªÉu ƒë·ªì 3D ƒë·∫πp m·∫Øt v·ªõi ƒë∆∞·ªùng cong tƒÉng tr∆∞·ªüng m√†u xanh d∆∞∆°ng r√µ n√©t ƒëi l√™n, n·ªÅn tr·∫Øng s·∫°ch s·∫Ω, c√°c con s·ªë th·ªëng k√™ r√µ r√†ng, bi·ªÉu t∆∞·ª£ng ${cleanKeyword} n·ªïi b·∫≠t ·ªü gi·ªØa, c√°c icon xu h∆∞·ªõng hi·ªán ƒë·∫°i xung quanh

PH·∫¶N 3
L·ªùi tho·∫°i: ƒêi·ªÉm n·ªïi b·∫≠t ƒë·∫ßu ti√™n c·ªßa ${cleanKeyword} l√† kh·∫£ nƒÉng gi√∫p b·∫°n c·∫£i thi·ªán cu·ªôc s·ªëng h√†ng ng√†y.
H√¨nh ·∫£nh: Ng∆∞·ªùi d√πng ƒëa d·∫°ng v·ªÅ tu·ªïi t√°c v√† s·∫Øc t·ªôc, t∆∞∆°i c∆∞·ªùi h√†i l√≤ng, ƒëang s·ª≠ d·ª•ng ho·∫∑c t∆∞∆°ng t√°c v·ªõi ${cleanKeyword} trong m√¥i tr∆∞·ªùng sinh ho·∫°t h√†ng ng√†y s√°ng s·ªßa, √°nh s√°ng t·ª± nhi√™n, b·ªë c·ª•c c√¢n ƒë·ªëi v√† r√µ r√†ng

PH·∫¶N 4
L·ªùi tho·∫°i: Th·ª© hai, c√°c chuy√™n gia khuy√™n d√πng ${cleanKeyword} ƒë·ªÉ tƒÉng hi·ªáu qu·∫£ c√¥ng vi·ªác l√™n ƒë·∫øn 40%.
H√¨nh ·∫£nh: Chuy√™n gia nam ho·∫∑c n·ªØ trong trang ph·ª•c c√¥ng s·ªü chuy√™n nghi·ªáp ƒë·ª©ng c·∫°nh m√†n h√¨nh tr√¨nh chi·∫øu ho·∫∑c b·∫£ng th√¥ng tin hi·ªán ƒë·∫°i, ƒëang ch·ªâ v√†o bi·ªÉu ƒë·ªì hi·ªáu su·∫•t c√≥ con s·ªë 40% v√† bi·ªÉu t∆∞·ª£ng ${cleanKeyword} ƒë∆∞·ª£c l√†m n·ªïi b·∫≠t b·∫±ng m√†u s·∫Øc t∆∞∆°ng ph·∫£n

PH·∫¶N 5
L·ªùi tho·∫°i: Kh·∫£o s√°t g·∫ßn ƒë√¢y cho th·∫•y 80% ng∆∞·ªùi d√πng ${cleanKeyword} ƒë√£ c·∫£m th·∫•y h√†i l√≤ng ngay t·ª´ l·∫ßn ƒë·∫ßu ti√™n.
H√¨nh ·∫£nh: Bi·ªÉu ƒë·ªì tr√≤n 3D chuy√™n nghi·ªáp hi·ªÉn th·ªã 80% ph√¢n kh√∫c m√†u xanh l√° c√¢y v√† 20% m√†u x√°m nh·∫°t, b√™n c·∫°nh l√† h√¨nh ·∫£nh nh√≥m ng∆∞·ªùi d√πng ƒëa d·∫°ng ƒëang m·ªâm c∆∞·ªùi, ng√≥n tay c√°i gi∆° l√™n, √°nh s√°ng t·ªët v√† b·ªë c·ª•c c√¢n ƒë·ªëi

PH·∫¶N 6
L·ªùi tho·∫°i: M·ªôt ƒëi·ªÉm th√∫ v·ªã n·ªØa l√† ${cleanKeyword} c√≥ th·ªÉ k·∫øt h·ª£p ho√†n h·∫£o v·ªõi nhi·ªÅu ho·∫°t ƒë·ªông kh√°c nhau trong ng√†y.
H√¨nh ·∫£nh: B·ªë c·ª•c chia ƒë√¥i ho·∫∑c l∆∞·ªõi h√¨nh ·∫£nh ch·∫•t l∆∞·ª£ng cao hi·ªÉn th·ªã ${cleanKeyword} ƒë∆∞·ª£c s·ª≠ d·ª•ng trong nhi·ªÅu m√¥i tr∆∞·ªùng: vƒÉn ph√≤ng hi·ªán ƒë·∫°i v·ªõi √°nh s√°ng t·ª± nhi√™n, ng√¥i nh√† ·∫•m c√∫ng v·ªõi chi ti·∫øt n·ªôi th·∫•t tinh t·∫ø, kh√¥ng gian ngo√†i tr·ªùi ƒë·∫πp m·∫Øt v·ªõi m√†u s·∫Øc s·ªëng ƒë·ªông

PH·∫¶N 7
L·ªùi tho·∫°i: V√† ƒë·ª´ng qu√™n, ${cleanKeyword} ƒëang ƒë∆∞·ª£c gi·∫£m gi√° ƒë·∫∑c bi·ªát trong th√°ng n√†y!
H√¨nh ·∫£nh: Thi·∫øt k·∫ø khuy·∫øn m√£i chuy√™n nghi·ªáp v·ªõi ${cleanKeyword} ƒë∆∞·ª£c tr∆∞ng b√†y n·ªïi b·∫≠t, nh√£n gi·∫£m gi√° m√†u ƒë·ªè t∆∞∆°i r·ª±c r·ª°, hi·ªáu ·ª©ng √°nh s√°ng tinh t·∫ø l√†m n·ªïi b·∫≠t s·∫£n ph·∫©m, b·ªë c·ª•c r√µ r√†ng v·ªõi gi√° m·ªõi v√† gi√° c≈© ƒë∆∞·ª£c hi·ªÉn th·ªã chuy√™n nghi·ªáp

PH·∫¶N CU·ªêI
L·ªùi tho·∫°i: N·∫øu b·∫°n th·∫•y video n√†y h·ªØu √≠ch, h√£y like v√† follow ƒë·ªÉ xem th√™m nhi·ªÅu n·ªôi dung th√∫ v·ªã v·ªÅ ${cleanKeyword} v√† c√°c ch·ªß ƒë·ªÅ kh√°c nh√©!
H√¨nh ·∫£nh: M√†n h√¨nh k·∫øt th√∫c video chuy√™n nghi·ªáp v·ªõi n√∫t like, subscribe ƒë∆∞·ª£c thi·∫øt k·∫ø n·ªïi b·∫≠t b·∫±ng m√†u ƒë·ªè ho·∫∑c xanh, ng∆∞·ªùi d·∫´n ch∆∞∆°ng tr√¨nh m·∫∑c trang ph·ª•c ƒë·∫πp m·∫Øt ƒëang m·ªâm c∆∞·ªùi th√¢n thi·ªán v√† v·∫´y tay ch√†o t·∫°m bi·ªát, √°nh s√°ng studio ho√†n h·∫£o
`;
      }
    } else {
      throw new Error("Ph·∫£n h·ªìi kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng t·ª´ API");
    }
  } catch (error) {
    console.error(`‚ùå L·ªói khi g·ªçi Vertex AI (${modelType}):`, error.message);
    throw new Error(`Kh√¥ng th·ªÉ t·∫°o k·ªãch b·∫£n v·ªõi Vertex AI (${modelType}): ${error.message}`);
  }
};

// H√†m sinh ch·ªß ƒë·ªÅ b·∫±ng Vertex AI v·ªõi Gemini Pro ho·∫∑c Flash
const generateTopicByVertexAI = async (keyword, modelType = 'pro') => {
  console.log(`üîç G·ªçi Vertex AI (${modelType}) v·ªõi t·ª´ kh√≥a ƒë√£ l√†m s·∫°ch: ${keyword}`);
  
  // Ch·ªçn model d·ª±a tr√™n modelType
  const model = getModelId(modelType);
  console.log(`üìå S·ª≠ d·ª•ng model: ${model}`);
  
  const cleanKeyword = cleanText(keyword);
  
  const prompt = `
B·∫°n l√† m·ªôt chuy√™n gia s√°ng t·∫°o n·ªôi dung cho m·∫°ng x√£ h·ªôi.

H√£y g·ª£i √Ω 10 √Ω t∆∞·ªüng ch·ªß ƒë·ªÅ video ng·∫Øn h·∫•p d·∫´n li√™n quan ƒë·∫øn: "${cleanKeyword}".

Y√™u c·∫ßu:
- √ù t∆∞·ªüng ph·∫£i thu h√∫t ng∆∞·ªùi xem
- Ph√π h·ª£p v·ªõi xu h∆∞·ªõng hi·ªán t·∫°i
- Ti√™u ƒë·ªÅ ph·∫£i ng·∫Øn g·ªçn, h·∫•p d·∫´n
- QUAN TR·ªåNG: Ch·ªâ tr·∫£ v·ªÅ danh s√°ch d·∫°ng JSON v·ªõi format sau: 
[
  {"title": "Ti√™u ƒë·ªÅ 1"},
  {"title": "Ti√™u ƒë·ªÅ 2"},
  ... c√°c ti√™u ƒë·ªÅ kh√°c
]
- Kh√¥ng th√™m th√¥ng tin gi·ªõi thi·ªáu hay gi·∫£i th√≠ch
`;

  try {
    console.log(`ü§ñ ƒêang g·ªçi Vertex AI (${modelType}) v·ªõi prompt:`);
    
    try {
      // Chu·∫©n b·ªã auth
      if (!credentials) {
        throw new Error("Kh√¥ng t√¨m th·∫•y credentials");
      }
      
      // T·∫°o auth client
      const auth = new GoogleAuth({
        keyFile: credentialsPath,
        scopes: [
          'https://www.googleapis.com/auth/cloud-platform',
          'https://www.googleapis.com/auth/cloud-platform.read-only'
        ],
      });

      // L·∫•y token
      const client = await auth.getClient();
      const accessToken = await client.getAccessToken();
      const token = accessToken.token;

      // Chu·∫©n b·ªã request body theo format m·ªõi
      const requestBody = {
        contents: {
          role: "user",
          parts: [
            {
              text: prompt
            }
          ]
        },
        generationConfig: {
          temperature: 0.4,
          maxOutputTokens: 8000,  // TƒÉng gi·ªõi h·∫°n token ƒë·∫ßu ra cao h∆°n nhi·ªÅu
          topK: 40,
          topP: 0.9
        }
      };

      // G·ªçi API s·ª≠ d·ª•ng Axios v·ªõi endpoint m·ªõi
      const response = await axios.post(
        `https://us-central1-aiplatform.googleapis.com/v1/projects/${credentials.project_id}/locations/us-central1/publishers/google/models/${model}:generateContent`,
        requestBody,
        {
          headers: {
            'Authorization': `Bearer ${token}`,
            'Content-Type': 'application/json'
          }
        }
      );

      // X·ª≠ l√Ω k·∫øt qu·∫£ v·ªõi c·∫•u tr√∫c ph·∫£n h·ªìi m·ªõi
      console.log('‚úì ƒê√£ nh·∫≠n ph·∫£n h·ªìi t·ª´ Vertex AI');
      
      // Log c·∫•u tr√∫c response ƒë·ªÉ debug
      console.log('üìã C·∫•u tr√∫c response (topics):', JSON.stringify(response.data, null, 2).substring(0, 500) + '...');
      
      // Ki·ªÉm tra finishReason MAX_TOKENS
      if (response.data?.candidates?.[0]?.finishReason === "MAX_TOKENS") {
        console.log('‚ö†Ô∏è C·∫£nh b√°o: API tr·∫£ v·ªÅ MAX_TOKENS, th·ª≠ l·∫°i v·ªõi prompt ng·∫Øn h∆°n');
        
        // Gi·∫£m k√≠ch th∆∞·ªõc prompt v√† th·ª≠ l·∫°i
        const shorterPrompt = `
G·ª£i √Ω 5 √Ω t∆∞·ªüng video ng·∫Øn v·ªÅ: "${cleanKeyword}". 
Ch·ªâ tr·∫£ v·ªÅ JSON theo format: 
[{"title":"Ti√™u ƒë·ªÅ 1"},{"title":"Ti√™u ƒë·ªÅ 2"}]
`;
        
        // Chu·∫©n b·ªã request body v·ªõi prompt ng·∫Øn h∆°n
        const retryRequestBody = {
          ...requestBody,
          contents: {
            role: "user",
            parts: [{ text: shorterPrompt }]
          },
          generationConfig: {
            temperature: 0.3,
            maxOutputTokens: 6000,  // TƒÉng gi·ªõi h·∫°n token ƒë·∫ßu ra cao h∆°n nhi·ªÅu
            topK: 30,
            topP: 0.8
          }
        };
        
        console.log('üîÑ Th·ª≠ l·∫°i v·ªõi prompt ng·∫Øn h∆°n');
        
        try {
          // G·ªçi API l·∫ßn n·ªØa
          const retryResponse = await axios.post(
            `https://us-central1-aiplatform.googleapis.com/v1/projects/${credentials.project_id}/locations/us-central1/publishers/google/models/${model}:generateContent`,
            retryRequestBody,
            {
              headers: {
                'Authorization': `Bearer ${token}`,
                'Content-Type': 'application/json'
              }
            }
          );
          
          console.log('‚úì ƒê√£ nh·∫≠n ph·∫£n h·ªìi th·ª≠ l·∫°i t·ª´ Vertex AI');
          console.log('üìã C·∫•u tr√∫c response th·ª≠ l·∫°i:', JSON.stringify(retryResponse.data, null, 2).substring(0, 300) + '...');
          
          // Thay th·∫ø response ban ƒë·∫ßu b·∫±ng response th·ª≠ l·∫°i
          response.data = retryResponse.data;
        } catch (retryError) {
          console.error('‚ùå L·ªói khi th·ª≠ l·∫°i:', retryError.message);
        }
      }
      
      let responseText = '';
      if (response.data && 
          response.data.candidates && 
          response.data.candidates.length > 0 && 
          response.data.candidates[0].content && 
          response.data.candidates[0].content.parts && 
          response.data.candidates[0].content.parts.length > 0) {
        
        responseText = response.data.candidates[0].content.parts[0].text;
      } else if (response.data && response.data.candidates && response.data.candidates.length > 0) {
        // Th·ª≠ t√¨m text theo c·∫•u tr√∫c kh√°c
        console.log('‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y text theo c·∫•u tr√∫c ti√™u chu·∫©n, th·ª≠ ph∆∞∆°ng √°n kh√°c');
        
        // Ki·ªÉm tra xem c√≥ c·∫•u tr√∫c thay th·∫ø kh√¥ng
        if (response.data.candidates[0].text) {
          responseText = response.data.candidates[0].text;
        } else if (response.data.candidates[0].output) {
          responseText = response.data.candidates[0].output;
        } else if (response.data.candidates[0].content?.text) {
          responseText = response.data.candidates[0].content.text;
        } else if (response.data.candidates[0].content?.role === "model") {
          // Tr∆∞·ªùng h·ª£p ƒë·∫∑c bi·ªát: content ch·ªâ c√≥ role m√† kh√¥ng c√≥ parts
          console.log('‚ö†Ô∏è Ph√°t hi·ªán c·∫•u tr√∫c ƒë·∫∑c bi·ªát: content ch·ªâ c√≥ tr∆∞·ªùng role');
          
          // T·∫°o c√°c ch·ªß ƒë·ªÅ m·∫´u
          const sampleTopics = [
            { title: `${cleanKeyword}: Nh·ªØng ƒëi·ªÅu b·∫°n ch∆∞a bi·∫øt` },
            { title: `10 b√≠ m·∫≠t v·ªÅ ${cleanKeyword} √≠t ng∆∞·ªùi bi·∫øt ƒë·∫øn` },
            { title: `${cleanKeyword} trending 2024 - Xu h∆∞·ªõng m·ªõi nh·∫•t` },
            { title: `L√†m th·∫ø n√†o ƒë·ªÉ ${cleanKeyword} hi·ªáu qu·∫£ nh·∫•t` },
            { title: `${cleanKeyword} cho ng∆∞·ªùi m·ªõi b·∫Øt ƒë·∫ßu` },
            { title: `${cleanKeyword} - Phi√™n b·∫£n n√¢ng c·∫•p` },
            { title: `S·ª± th·∫≠t v·ªÅ ${cleanKeyword} g√¢y s·ªëc` },
            { title: `${cleanKeyword} trong 60 gi√¢y` },
            { title: `${cleanKeyword} - Tr·∫£i nghi·ªám ƒë·∫ßu ti√™n` },
            { title: `${cleanKeyword} hacks b·∫°n n√™n bi·∫øt` }
          ];
          
          // Tr·∫£ v·ªÅ JSON string c·ªßa ch·ªß ƒë·ªÅ m·∫´u
          responseText = JSON.stringify(sampleTopics);
        } else {
          // Tr·∫£ v·ªÅ to√†n b·ªô ƒë·ªëi t∆∞·ª£ng candidates[0] d·∫°ng chu·ªói l√†m ph∆∞∆°ng √°n cu·ªëi
          console.log('‚ö†Ô∏è Th·ª≠ tr·∫£ v·ªÅ to√†n b·ªô ƒë·ªëi t∆∞·ª£ng candidates[0]');
          responseText = JSON.stringify(response.data.candidates[0]);
        }
      } else {
        throw new Error("Ph·∫£n h·ªìi kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng t·ª´ API");
      }
      
      // Ph·∫ßn c√≤n l·∫°i c·ªßa h√†m x·ª≠ l√Ω k·∫øt qu·∫£ (kh√¥ng thay ƒë·ªïi)
      console.log('üìù K·∫øt qu·∫£ th√¥ t·ª´ Vertex AI:', responseText.substring(0, 100) + '...');
      
      // ƒê·∫£m b·∫£o k·∫øt qu·∫£ l√† m·ªôt m·∫£ng JSON h·ª£p l·ªá
      let topics = [];
      
      try {
        // T√¨m v√† tr√≠ch xu·∫•t ph·∫ßn JSON trong k·∫øt qu·∫£ (n·∫øu c√≥)
        const jsonMatch = responseText.match(/\[\s*\{.*\}\s*\]/s);
        if (jsonMatch) {
          console.log('T√¨m th·∫•y chu·ªói JSON trong k·∫øt qu·∫£');
          responseText = jsonMatch[0];
        }
        
        topics = JSON.parse(responseText);
        console.log('‚úÖ Parse JSON th√†nh c√¥ng');
      } catch (jsonError) {
        console.log('‚ùå Kh√¥ng th·ªÉ parse JSON, chuy·ªÉn sang x·ª≠ l√Ω vƒÉn b·∫£n');
        // N·∫øu kh√¥ng ph·∫£i JSON, c·ªë g·∫Øng ph√¢n t√≠ch t·ª´ vƒÉn b·∫£n
        const lines = responseText.split('\n').filter(line => line.trim() !== '');
        topics = [];
        
        // T√¨m c√°c d√≤ng c√≥ ch·ª©a ti√™u ƒë·ªÅ
        for (const line of lines) {
          // Lo·∫°i b·ªè s·ªë th·ª© t·ª±, d·∫•u g·∫°ch ƒë·∫ßu d√≤ng
          const cleanLine = line.replace(/^(\d+\.|\-|\*)\s*/, '').trim();
          
          // Lo·∫°i b·ªè c√°c k√Ω t·ª± kh√¥ng c·∫ßn thi·∫øt nh∆∞ d·∫•u ngo·∫∑c k√©p, d·∫•u ph·∫©y n·∫øu ƒë√≥ l√† ph·∫ßn c·ªßa JSON
          const titleMatch = cleanLine.match(/"title"\s*:\s*"([^"]+)"/);
          
          if (titleMatch) {
            topics.push({ title: titleMatch[1] });
          } else if (cleanLine && cleanLine.length > 3) {
            topics.push({ title: cleanLine });
          }
        }
      }
      
      // N·∫øu kh√¥ng t√¨m th·∫•y ƒë·ªß ch·ªß ƒë·ªÅ, t·∫°o m·ªôt s·ªë ch·ªß ƒë·ªÅ m·∫´u
      if (!Array.isArray(topics) || topics.length < 3) {
        console.log('‚ö†Ô∏è Kh√¥ng ƒë·ªß ch·ªß ƒë·ªÅ, t·∫°o ch·ªß ƒë·ªÅ m·∫´u');
        topics = [
          { title: `${cleanKeyword}: Nh·ªØng ƒëi·ªÅu b·∫°n ch∆∞a bi·∫øt` },
          { title: `10 b√≠ m·∫≠t v·ªÅ ${cleanKeyword} √≠t ng∆∞·ªùi bi·∫øt ƒë·∫øn` },
          { title: `${cleanKeyword} trending 2024 - Xu h∆∞·ªõng m·ªõi nh·∫•t` },
          { title: `L√†m th·∫ø n√†o ƒë·ªÉ ${cleanKeyword} hi·ªáu qu·∫£ nh·∫•t` },
          { title: `${cleanKeyword} cho ng∆∞·ªùi m·ªõi b·∫Øt ƒë·∫ßu` },
          { title: `${cleanKeyword} - Phi√™n b·∫£n n√¢ng c·∫•p` },
          { title: `S·ª± th·∫≠t v·ªÅ ${cleanKeyword} g√¢y s·ªëc` },
          { title: `${cleanKeyword} trong 60 gi√¢y` },
          { title: `${cleanKeyword} - Tr·∫£i nghi·ªám ƒë·∫ßu ti√™n` },
          { title: `${cleanKeyword} hacks b·∫°n n√™n bi·∫øt` }
        ];
      }
      
      // Map ƒë·ªÉ ƒë·∫£m b·∫£o m·ªói ph·∫ßn t·ª≠ c√≥ ƒë√∫ng ƒë·ªãnh d·∫°ng
      const formattedTopics = topics.map(item => {
        if (typeof item === 'string') {
          return { title: item, source: 'Vertex AI' };
        }
        return { title: item.title || `√ù t∆∞·ªüng v·ªÅ ${cleanKeyword}`, source: 'Vertex AI' };
      }).slice(0, 10); // Gi·ªõi h·∫°n 10 ch·ªß ƒë·ªÅ
      
      console.log(`‚úì ƒê√£ x·ª≠ l√Ω th√†nh c√¥ng ${formattedTopics.length} ch·ªß ƒë·ªÅ t·ª´ Vertex AI`);
      return formattedTopics;
    } catch (apiError) {
      console.error("‚ùå L·ªói khi g·ªçi Vertex AI:", apiError.message);
      throw apiError;
    }
  } catch (generalError) {
    console.error("‚ùå L·ªói t·ªïng th·ªÉ:", generalError.message);
    
    // T·∫°o ch·ªß ƒë·ªÅ m·∫´u khi c√≥ l·ªói t·ªïng th·ªÉ
    const emergencyTopics = [
      { title: `${cleanKeyword}: Nh·ªØng ƒëi·ªÅu b·∫°n ch∆∞a bi·∫øt`, source: 'Vertex AI' },
      { title: `10 b√≠ m·∫≠t v·ªÅ ${cleanKeyword} √≠t ng∆∞·ªùi bi·∫øt ƒë·∫øn`, source: 'Vertex AI' },
      { title: `${cleanKeyword} trending 2024 - Xu h∆∞·ªõng m·ªõi nh·∫•t`, source: 'Vertex AI' },
      { title: `L√†m th·∫ø n√†o ƒë·ªÉ ${cleanKeyword} hi·ªáu qu·∫£ nh·∫•t`, source: 'Vertex AI' },
      { title: `${cleanKeyword} cho ng∆∞·ªùi m·ªõi b·∫Øt ƒë·∫ßu`, source: 'Vertex AI' },
      { title: `${cleanKeyword} - Phi√™n b·∫£n n√¢ng c·∫•p`, source: 'Vertex AI' },
      { title: `S·ª± th·∫≠t v·ªÅ ${cleanKeyword} g√¢y s·ªëc`, source: 'Vertex AI' },
      { title: `${cleanKeyword} trong 60 gi√¢y`, source: 'Vertex AI' },
      { title: `${cleanKeyword} - Tr·∫£i nghi·ªám ƒë·∫ßu ti√™n`, source: 'Vertex AI' },
      { title: `${cleanKeyword} hacks b·∫°n n√™n bi·∫øt`, source: 'Vertex AI' }
    ];
    return emergencyTopics;
  }
};

// Xu·∫•t module
module.exports = {
  generateTopicByVertexAI,
  generateScriptByVertexAI
};
