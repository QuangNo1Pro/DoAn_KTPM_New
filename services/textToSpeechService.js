const fs = require('fs');
const util = require('util');
const path = require('path');
const textToSpeech = require('@google-cloud/text-to-speech');

// ƒê∆∞·ªùng d·∫´n ƒë·∫øn file credentials
const credentialsPath = path.join(__dirname, '..', 'text to speed.json');

// Ki·ªÉm tra file credentials
if (!fs.existsSync(credentialsPath)) {
  console.error(`‚ùå Kh√¥ng t√¨m th·∫•y file Text-to-Speech credentials t·∫°i ƒë∆∞·ªùng d·∫´n: ${credentialsPath}`);
} else {
  console.log(`‚úì ƒê√£ t√¨m th·∫•y Text-to-Speech credentials t·∫°i: ${credentialsPath}`);
}

// C√°c gi·ªçng n√≥i ti·∫øng Vi·ªát c√≥ s·∫µn
const VIETNAMESE_VOICES = {
  FEMALE_STANDARD_A: "vi-VN-Standard-A", // N·ªØ (Standard)
  MALE_STANDARD_B: "vi-VN-Standard-B",   // Nam (Standard)
  FEMALE_STANDARD_C: "vi-VN-Standard-C", // N·ªØ (Standard)
  MALE_STANDARD_D: "vi-VN-Standard-D",   // Nam (Standard)
  FEMALE_WAVENET_A: "vi-VN-Wavenet-A",   // N·ªØ (Wavenet - ch·∫•t l∆∞·ª£ng cao)
  MALE_WAVENET_B: "vi-VN-Wavenet-B",     // Nam (Wavenet - ch·∫•t l∆∞·ª£ng cao)
  FEMALE_WAVENET_C: "vi-VN-Wavenet-C",   // N·ªØ (Wavenet - ch·∫•t l∆∞·ª£ng cao)
  MALE_WAVENET_D: "vi-VN-Wavenet-D",     // Nam (Wavenet - ch·∫•t l∆∞·ª£ng cao)
  FEMALE_NEURAL_A: "vi-VN-Neural2-A",    // N·ªØ (Neural2 - ch·∫•t l∆∞·ª£ng cao nh·∫•t)
  MALE_NEURAL_D: "vi-VN-Neural2-D",      // Nam (Neural2 - ch·∫•t l∆∞·ª£ng cao nh·∫•t)
};

// T·∫°o client Text-to-Speech v·ªõi credentials
let client;
try {
  client = new textToSpeech.TextToSpeechClient({
    keyFilename: credentialsPath
  });
  console.log('‚úì ƒê√£ kh·ªüi t·∫°o Text-to-Speech client th√†nh c√¥ng');
} catch (error) {
  console.error('‚ùå L·ªói kh·ªüi t·∫°o Text-to-Speech client:', error.message);
}

/**
 * Chuy·ªÉn ƒëo·∫°n vƒÉn b·∫£n th√†nh file √¢m thanh
 * @param {string} text - VƒÉn b·∫£n c·∫ßn chuy·ªÉn th√†nh gi·ªçng n√≥i
 * @param {string} outputPath - ƒê∆∞·ªùng d·∫´n file √¢m thanh ƒë·∫ßu ra
 * @param {string} voiceId - ID c·ªßa gi·ªçng n√≥i (m·∫∑c ƒë·ªãnh l√† n·ªØ Neural2 ch·∫•t l∆∞·ª£ng cao nh·∫•t)
 * @returns {Promise<string>} - ƒê∆∞·ªùng d·∫´n ƒë·∫øn file √¢m thanh
 */
async function convertTextToSpeech(text, outputPath, voiceId = VIETNAMESE_VOICES.FEMALE_NEURAL_A) {
  try {
    if (!text || text.trim() === '') {
      throw new Error('VƒÉn b·∫£n kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng');
    }

    console.log(`üîä ƒêang chuy·ªÉn vƒÉn b·∫£n th√†nh gi·ªçng n√≥i v·ªõi gi·ªçng ${voiceId}...`);

    // T·∫°o th∆∞ m·ª•c ƒë·∫ßu ra n·∫øu ch∆∞a t·ªìn t·∫°i
    const outputDir = path.dirname(outputPath);
    if (!fs.existsSync(outputDir)) {
      fs.mkdirSync(outputDir, { recursive: true });
    }

    // C·∫•u h√¨nh request
    const request = {
      input: { text },
      voice: {
        languageCode: 'vi-VN',
        name: voiceId,
      },
      audioConfig: {
        audioEncoding: 'MP3',
        pitch: 0,           // Cao ƒë·ªô: -20.0 ƒë·∫øn 20.0, m·∫∑c ƒë·ªãnh l√† 0
        speakingRate: 1.0,  // T·ªëc ƒë·ªô: 0.25 ƒë·∫øn 4.0, m·∫∑c ƒë·ªãnh l√† 1.0
        volumeGainDb: 0.0   // √Çm l∆∞·ª£ng: -96.0 ƒë·∫øn 16.0, m·∫∑c ƒë·ªãnh l√† 0.0
      },
    };

    // G·ªçi API ƒë·ªÉ chuy·ªÉn vƒÉn b·∫£n th√†nh gi·ªçng n√≥i
    const [response] = await client.synthesizeSpeech(request);
    
    // Ghi file √¢m thanh
    await util.promisify(fs.writeFile)(outputPath, response.audioContent, 'binary');
    
    console.log(`‚úì ƒê√£ t·∫°o file gi·ªçng n√≥i t·∫°i: ${outputPath}`);
    return outputPath;
  } catch (error) {
    console.error('‚ùå L·ªói khi chuy·ªÉn vƒÉn b·∫£n th√†nh gi·ªçng n√≥i:', error);
    throw error;
  }
}

/**
 * Ph√¢n t√≠ch k·ªãch b·∫£n v√† t·∫°o file √¢m thanh cho t·ª´ng ph·∫ßn
 * @param {string} script - N·ªôi dung k·ªãch b·∫£n
 * @param {string} outputDir - Th∆∞ m·ª•c ƒë·∫ßu ra cho c√°c file √¢m thanh
 * @param {string} voiceId - ID c·ªßa gi·ªçng n√≥i
 * @returns {Promise<Array<{text: string, audioPath: string, image: string}>>} - Danh s√°ch c√°c ph·∫ßn v·ªõi ƒë∆∞·ªùng d·∫´n √¢m thanh
 */
async function createAudioForScript(script, outputDir, voiceId = VIETNAMESE_VOICES.FEMALE_NEURAL_A) {
  try {
    // Ki·ªÉm tra v√† t·∫°o th∆∞ m·ª•c ƒë·∫ßu ra
    if (!fs.existsSync(outputDir)) {
      fs.mkdirSync(outputDir, { recursive: true });
    }

    // Tr√≠ch xu·∫•t c√°c ph·∫ßn t·ª´ k·ªãch b·∫£n
    const scriptParts = extractScriptParts(script);
    console.log(`ƒê√£ t√¨m th·∫•y ${scriptParts.length} ph·∫ßn trong k·ªãch b·∫£n`);

    // T·∫°o √¢m thanh cho t·ª´ng ph·∫ßn
    const audioResults = [];
    
    for (let i = 0; i < scriptParts.length; i++) {
      const part = scriptParts[i];
      const outputPath = path.join(outputDir, `part_${i + 1}.mp3`);
      
      console.log(`ƒêang x·ª≠ l√Ω ph·∫ßn ${i + 1}/${scriptParts.length}: "${part.text.substring(0, 30)}..."`);
      
      try {
        const audioPath = await convertTextToSpeech(part.text, outputPath, voiceId);
        audioResults.push({
          ...part,
          audioPath
        });
      } catch (error) {
        console.error(`L·ªói khi x·ª≠ l√Ω ph·∫ßn ${i + 1}:`, error.message);
        // Ti·∫øp t·ª•c v·ªõi ph·∫ßn ti·∫øp theo n·∫øu c√≥ l·ªói
      }
    }

    console.log(`‚úì ƒê√£ t·∫°o ${audioResults.length}/${scriptParts.length} file √¢m thanh`);
    return audioResults;
  } catch (error) {
    console.error('‚ùå L·ªói khi t·∫°o √¢m thanh cho k·ªãch b·∫£n:', error);
    throw error;
  }
}

/**
 * Tr√≠ch xu·∫•t c√°c ph·∫ßn t·ª´ k·ªãch b·∫£n
 * @param {string} script - N·ªôi dung k·ªãch b·∫£n
 * @returns {Array<{part: string, text: string, image: string}>} - C√°c ph·∫ßn c·ªßa k·ªãch b·∫£n
 */
function extractScriptParts(script) {
  const parts = [];
  
  // S·ª≠ d·ª•ng regex ƒë·ªÉ t√¨m c√°c ph·∫ßn trong k·ªãch b·∫£n (h·ªó tr·ª£ c·∫£ ƒë·ªãnh d·∫°ng m·ªõi v√† c≈©)
  const partRegex = /((?:##?\s*)?PH·∫¶N\s+(\d+|CU·ªêI|1:\s*HOOK)[\s\S]*?)(?:(?:\*\*)?L·ªùi\s*tho·∫°i:?(?:\*\*)?\s*)([\s\S]*?)(?:(?:(?:\*\*)?H√¨nh\s*·∫£nh:?(?:\*\*)?\s*)([\s\S]*?))?(?=\s*(?:(?:##?\s*)?PH·∫¶N|\s*(?:##?\s*)?PH·∫¶N CU·ªêI)|\s*$)/gi;
  
  let match;
  while ((match = partRegex.exec(script)) !== null) {
    const [fullMatch, sectionHeader, part, text, image] = match;
    parts.push({
      part: part.trim(),
      text: text ? text.trim() : '',
      image: image ? image.trim() : ''
    });
  }
  
  return parts;
}

/**
 * T·∫°o m·ªôt file √¢m thanh ho√†n ch·ªânh cho to√†n b·ªô k·ªãch b·∫£n
 * @param {string} script - N·ªôi dung k·ªãch b·∫£n
 * @param {string} outputPath - ƒê∆∞·ªùng d·∫´n file √¢m thanh ƒë·∫ßu ra
 * @param {string} voiceId - ID c·ªßa gi·ªçng n√≥i
 * @returns {Promise<string>} - ƒê∆∞·ªùng d·∫´n ƒë·∫øn file √¢m thanh
 */
async function createFullAudioForScript(script, outputPath, voiceId = VIETNAMESE_VOICES.FEMALE_NEURAL_A) {
  try {
    // Tr√≠ch xu·∫•t to√†n b·ªô l·ªùi tho·∫°i t·ª´ k·ªãch b·∫£n
    const scriptParts = extractScriptParts(script);
    const fullText = scriptParts.map(part => part.text).join('\n\n');
    
    // T·∫°o √¢m thanh cho to√†n b·ªô vƒÉn b·∫£n
    console.log(`ƒêang t·∫°o file √¢m thanh ho√†n ch·ªânh cho k·ªãch b·∫£n...`);
    const audioPath = await convertTextToSpeech(fullText, outputPath, voiceId);
    
    return audioPath;
  } catch (error) {
    console.error('‚ùå L·ªói khi t·∫°o √¢m thanh ho√†n ch·ªânh cho k·ªãch b·∫£n:', error);
    throw error;
  }
}

module.exports = {
  VIETNAMESE_VOICES,
  convertTextToSpeech,
  createAudioForScript,
  createFullAudioForScript,
  extractScriptParts
}; 