const { GoogleAuth } = require('google-auth-library');
const path = require('path');
const fs = require('fs');
const axios = require('axios');
require('dotenv').config();

// ƒê·ªãnh nghƒ©a c√°c m√¥ h√¨nh AI t·∫°o ·∫£nh c√≥ s·∫µn
const AI_MODELS = {
  IMAGEN_ULTRA: "imagen-4.0-ultra-generate-preview-06-06",
  IMAGEN_STANDARD: "imagen-4.0-generate-preview-06-06",
  IMAGEN_FAST: "imagen-4.0-fast-generate-preview-06-06"
};

// ƒê∆∞·ªùng d·∫´n ƒë·∫øn file credentials
const credentialsPath = path.join(__dirname, '..', 'gemini.json');

// Ki·ªÉm tra file credentials
if (!fs.existsSync(credentialsPath)) {
  console.error(`‚ùå Kh√¥ng t√¨m th·∫•y file credentials t·∫°i ƒë∆∞·ªùng d·∫´n: ${credentialsPath}`);
} else {
  console.log(`‚úì ƒê√£ t√¨m th·∫•y file credentials t·∫°i: ${credentialsPath}`);
}

// ƒê·ªçc credentials t·ª´ file
let credentials;
try {
  credentials = JSON.parse(fs.readFileSync(credentialsPath));
  console.log(`‚úì ƒê√£ ƒë·ªçc credentials cho project: ${credentials.project_id}`);
} catch (error) {
  console.error('‚ùå L·ªói khi ƒë·ªçc file credentials:', error.message);
}

// H√†m sleep ƒë·ªÉ t·∫°o ƒë·ªô tr·ªÖ
const sleep = (ms) => {
  return new Promise(resolve => setTimeout(resolve, ms));
};

// H√†m t·∫°o ·∫£nh b·∫±ng Imagen t·ª´ Google Cloud
const generateImageByImagen = async (prompt, options = {}) => {
  const {
    modelType = 'ultra',
    imageCount = 1,
    aspectRatio = '1:1',
    retryDelay = 5000, // TƒÉng th·ªùi gian ch·ªù l√™n 5 gi√¢y
    maxRetries = 5     // TƒÉng s·ªë l·∫ßn th·ª≠ l·∫°i l√™n 5 l·∫ßn
  } = options;
  
  // Ch·ªçn model d·ª±a tr√™n modelType
  let model;
  switch(modelType) {
    case 'ultra':
      model = AI_MODELS.IMAGEN_ULTRA;
      break;
    case 'fast':
      model = AI_MODELS.IMAGEN_FAST;
      break;
    default:
      model = AI_MODELS.IMAGEN_STANDARD;
  }
  
  console.log(`üñºÔ∏è ƒêang t·∫°o ·∫£nh v·ªõi Imagen (${modelType})...`);
  console.log(`üìù Prompt: ${prompt}`);
  console.log(`üìå S·ª≠ d·ª•ng model: ${model}`);

  try {
    // ƒê·∫£m b·∫£o prompt l√† chu·ªói v√† kh√¥ng r·ªóng
    if (!prompt || typeof prompt !== 'string' || prompt.trim() === '') {
      console.log('‚ùå Prompt kh√¥ng h·ª£p l·ªá ho·∫∑c r·ªóng');
      throw new Error("Prompt kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng.");
    }
    
    // Chu·∫©n b·ªã auth
    if (!credentials) {
      throw new Error("Kh√¥ng t√¨m th·∫•y credentials");
    }
    
    // T·∫°o auth client
    const auth = new GoogleAuth({
      keyFile: credentialsPath,
      scopes: [
        'https://www.googleapis.com/auth/cloud-platform',
        'https://www.googleapis.com/auth/cloud-platform.read-only'
      ],
    });

    // L·∫•y token
    const client = await auth.getClient();
    const accessToken = await client.getAccessToken();
    const token = accessToken.token;

    // Chu·∫©n b·ªã request body cho Imagen API
    const requestBody = {
      "instances": [
        {
          "prompt": prompt
        }
      ],
      "parameters": {
        "sampleCount": imageCount
      }
    };

    // Th·ª≠ g·ªçi API v·ªõi c∆° ch·∫ø retry
    let response;
    let retryCount = 0;
    let lastError;
    
    while (retryCount <= maxRetries) {
      try {
        if (retryCount > 0) {
          console.log(`‚è≥ ƒêang th·ª≠ l·∫°i l·∫ßn th·ª© ${retryCount}/${maxRetries} sau ${retryDelay}ms...`);
          await sleep(retryDelay);
        }
        
        // G·ªçi API s·ª≠ d·ª•ng Axios
        response = await axios.post(
          `https://us-central1-aiplatform.googleapis.com/v1/projects/${credentials.project_id}/locations/us-central1/publishers/google/models/${model}:predict`,
          requestBody,
          {
            headers: {
              'Authorization': `Bearer ${token}`,
              'Content-Type': 'application/json'
            }
          }
        );
        
        // N·∫øu th√†nh c√¥ng, tho√°t kh·ªèi v√≤ng l·∫∑p
        break;
      } catch (error) {
        lastError = error;
        
        // N·∫øu g·∫∑p l·ªói 429 (Rate Limiting), tƒÉng th·ªùi gian ch·ªù
        if (error.response && error.response.status === 429) {
          retryCount++;
          // TƒÉng th·ªùi gian ch·ªù theo c·∫•p s·ªë nh√¢n
          const waitTime = retryDelay * Math.pow(2, retryCount);
          console.log(`‚ö†Ô∏è API rate limit (429), ch·ªù ${waitTime}ms tr∆∞·ªõc khi th·ª≠ l·∫°i...`);
          continue;
        } else {
          // C√°c l·ªói kh√°c, kh√¥ng retry
          throw error;
        }
      }
    }
    
    // N·∫øu ƒë√£ th·ª≠ h·∫øt s·ªë l·∫ßn m√† v·∫´n l·ªói
    if (!response) {
      throw lastError || new Error("Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn API sau nhi·ªÅu l·∫ßn th·ª≠");
    }

    // X·ª≠ l√Ω k·∫øt qu·∫£
    console.log('‚úì ƒê√£ nh·∫≠n ph·∫£n h·ªìi t·ª´ Imagen API');
    
    if (response.data && response.data.predictions) {
      // Tr√≠ch xu·∫•t c√°c URL ·∫£nh t·ª´ k·∫øt qu·∫£
      const images = response.data.predictions.map(prediction => {
        if (prediction.bytesBase64Encoded) {
          return {
            imageData: prediction.bytesBase64Encoded,
            type: 'base64'
          };
        } else if (prediction.imageUrl) {
          return {
            imageData: prediction.imageUrl,
            type: 'url'
          };
        }
        return null;
      }).filter(img => img !== null);
      
      console.log(`‚úÖ ƒê√£ t·∫°o th√†nh c√¥ng ${images.length} ·∫£nh`);
      return images;
    } else {
      console.error('‚ùå Ph·∫£n h·ªìi kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng t·ª´ API');
      throw new Error("Ph·∫£n h·ªìi kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng t·ª´ API");
    }
  } catch (error) {
    console.error('‚ùå L·ªói khi g·ªçi Imagen API:', error.message);
    throw new Error(`Kh√¥ng th·ªÉ t·∫°o ·∫£nh v·ªõi Imagen: ${error.message}`);
  }
};

module.exports = {
  generateImageByImagen
}; 